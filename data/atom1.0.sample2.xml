<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>
    <![CDATA[(think)]]>
  </title>
  <link href="http://batsov.com/atom.xml" rel="self"/>
  <link href="http://batsov.com/"/>
  <updated>2015-06-17T12:45:14+03:00
  </updated>
  <id>http://batsov.com/
  </id>
  <author>
    <name>
      <![CDATA[Bozhidar Batsov]]>
    </name>

  </author>
  <generator uri="http://octopress.org/">Octopress
  </generator>


  <entry>
    <title type="html">
      <![CDATA[CIDER 0.9]]>
    </title>
    <link href="http://batsov.com/articles/2015/06/16/cider-0-dot-9/"/>
    <updated>2015-06-16T15:59:00+03:00
    </updated>
    <id>http://batsov.com/articles/2015/06/16/cider-0-dot-9
    </id>
    <content type="html">
      <![CDATA[<p><a href="https://github.com/clojure-emacs/cider">CIDER</a> 0.9 is finally out and
               it&rsquo;s our best release yet (believe it or not)! It took a lot
               more time than I originally anticipated, but at least we managed to
               ship in time for <a href="http://euroclojure.org">EuroClojure</a>!</p>

<p>There are a ton of important changes and new features in 0.9 and now I&rsquo;ll go
quickly through some of them.</p>

<h3>Debugger</h3>

<p>Believe it or not CIDER now has a debugger! This was like
the most requested feature ever, so I&rsquo;m sure at least some of you are
excited. The debugger was developed by the awesome
<a href="http://endlessparentheses.com">Artur Malabarba</a>. He even wrote
<a href="http://endlessparentheses.com/cider-debug-a-visual-interactive-debugger-for-clojure.html">a post about it</a>
and I guess you should read it.</p>

<h3>Dependency isolation</h3>

<p>CIDER&rsquo;s dependencies will no longer affect your projects (read this as
<em>introduce dependency conflicts in them</em>). All the dependencies are
now isolated using source rewriting (simply put &ndash; they live in
different namespaces than the original libraries). This magic is done by
<a href="https://github.com/benedekfazekas/mranderson">mranderson</a>. Thanks to
<a href="https://github.com/benedekfazekas">Benedek Fazekas</a> for creating this
small but super helpful tool!</p>

<h3>Rich code completion</h3>

<p>Completion candidates are now annotated with information about the
namespace and the type of the thing being completed. It&rsquo;s pretty neat.</p>

<p><img src="https://raw.githubusercontent.com/clojure-emacs/cider/master/screenshots/completion-annotations.png"></p>

<p>The screenshot above features
<a href="http://company-mode.github.io/">company-mode</a>. The annotations are
not supported in <code>auto-complete-mode</code> (that&rsquo;s a limitation of AC, not
a limitation of CIDER).</p>

<h3>Misc additions</h3>

<p>Here&rsquo;s a short list of other important additions:</p>

<ul>
<li>Support for Piggieback 0.2</li>
<li>New code formatting commands (based on <a href="https://github.com/weavejester/cljfmt">cljfmt</a>)</li>
<li>New EDN data formatting commands</li>
</ul>


<h2>Changes</h2>

<p>There were also a few important changes. Most notably we had to
<a href="https://github.com/clojure-emacs/cider/issues/1088">kill source-tracking code evaluation</a>,
as it wasn&rsquo;t playing nice with ClojureScript. This was also a hacky
solution and I still hope than one day this will be properly supported
in nREPL itself. In simple terms &ndash; var definitions evaluated by
themselves won&rsquo;t have any location metadata set for them, which will
make it impossible to go their definition.  You can also help out by
voicing your support for this
<a href="http://dev.clojure.org/jira/browse/NREPL-59">nREPL ticket</a>&rsquo;s patch to
be merged.</p>

<p>You&rsquo;ll also notice that some commands that didn&rsquo;t prompt for
confirmation in the past do so now (e.g. <code>find-var</code>).  This was done mostly for
consistency with Emacs&rsquo;s own commands that do similar things. The
behavior is configurable via <code>cider-prompt-for-symbol</code>. If a ton of
people dislike the new defaults reverting them is on the table.</p>

<h2>All the Gory Details</h2>

<p>There were truly a ton of changes and there&rsquo;s little point in me
repeating them here. If you want to know everything have a look at the
<a href="https://github.com/clojure-emacs/cider/releases/tag/v0.9.0">release notes</a>.</p>

<h2>The Road Ahead</h2>

<p>Going forward our top priority will be merging some functionality from
<a href="https://github.com/clojure-emacs/refactor-nrepl">refactor-nrepl</a> and
<a href="https://github.com/clojure-emacs/clj-refactor.el">clj-refactor</a> into
CIDER itself.  Think of things like <code>find-usages</code>,
<code>extract-definition</code>, etc. Refining the debugger will be another top
priority.</p>

<p>We&rsquo;ll also try to do some important internal changes:</p>

<ul>
<li><a href="https://github.com/clojure-emacs/cider/issues/1068">reorganize the entire codebase in a more sensible manner</a></li>
<li><a href="https://github.com/clojure-emacs/cider/issues/1099">rework nREPL response handling</a></li>
<li><a href="https://github.com/clojure-emacs/cider/issues/709">rework the REPL to use <code>comint-mode</code></a></li>
<li><a href="https://github.com/clojure-emacs/cider/issues/732">improve quitting and restarting</a></li>
</ul>


<p>Depending of how well we progress on those tasks the next release will
be either 0.10 or 1.0. I won&rsquo;t make any commitments about its release
date (but judging from past it will likely be 3 to 6 months from now).</p>

<p>If you&rsquo;re wondering why things are moving more slowly lately, here&rsquo;s
the answer for you &ndash; I&rsquo;ve been super busy since the beginning of the
year and haven&rsquo;t had much time for open-source projects. I&rsquo;m hoping
this will change, but only time will tell.  I&rsquo;m very happy that a lot
of people contributed to the development of CIDER 0.9. The project
definitely doesn&rsquo;t have a bus factor of one. :&ndash;)</p>

<p>Special thanks to <a href="https://github.com/cichli">Michael Griffiths</a> who
did a ton of great work on this release. You rock!</p>

<p><strong>P.S.</strong> Recently I talked on the
<a href="http://blog.cognitect.com/cognicast">Cognicast</a> about CIDER (in
general and 0.9 in particular). You might find
<a href="http://blog.cognitect.com/cognicast/080">this episode</a> interesting.</p>

<p><strong>P.P.S.</strong> I&rsquo;m rarely on IRC these days. <code>#cider</code> on
<a href="https://clojurians.slack.com/">slack</a> and our
<a href="https://gitter.im/clojure-emacs/cider">gitter channel</a> are the
official CIDER chats as far as I&rsquo;m concerned.</p>
      ]]>
</content>
</entry>

<entry>
  <title type="html">
    <![CDATA[Projectile 0.12 released]]>
  </title>
  <link href="http://batsov.com/articles/2015/03/29/projectile-0-dot-12-released/"/>
  <updated>2015-03-29T10:11:00+03:00
  </updated>
  <id>http://batsov.com/articles/2015/03/29/projectile-0-dot-12-released
  </id>
  <content type="html">
    <![CDATA[<p><a href="https://github.com/bbatsov/projectile">Projectile</a> 0.12 is finally out!</p>

<p>A lot of time has passed since the previous stable release, for which
I&rsquo;m truly sorry.  I kept delaying and delaying the release for various
reasons, but it&rsquo;s finally here and it&rsquo;s pretty <strong>big</strong>.  Please,
consult the
<a href="https://github.com/bbatsov/projectile/blob/master/CHANGELOG.md">CHANGELOG</a>
for some of the more interesting changes. Note that some changes and
new features are totally undocumented, as I haven&rsquo;t been as demanding
to contributors as I&rsquo;m usually on my other projects (meaning I didn&rsquo;t
ask everyone to update the changelog or the readme).</p>

<p>It&rsquo;s funny how open-source works &ndash; I never expected that Projectile
would have any users except me, but today it&rsquo;s one of the most popular
3rd party Emacs extensions. Unfortunately I&rsquo;m involved with many
other projects and have a pretty demanding day job, so issues and feature
requests have been piling up
lately. <a href="https://github.com/bbatsov/projectile/issues">80 open issues</a> &ndash;
that&rsquo;s depressing! I guess I&rsquo;m a pretty lame maintainer! :&ndash;)</p>

<p>If you like the project, I&rsquo;d appreciate your assistance to bring their
number down.  Many of the requests are relatively easy to implement,
some don&rsquo;t make sense and should be simply closed (or might have been
fixed accidentally). Same goes for the open PRs.</p>

<p>Alternatively, you can support Projectile&rsquo;s continued development via
<a href="https://www.gratipay.com/bbatsov">gratipay</a> or PayPal.</p>

<p><a href="https://gratipay.com/bbatsov"><img src="https://cdn.rawgit.com/gratipay/gratipay-badge/2.1.3/dist/gratipay.png" alt="Support via Gratipay" /></a></p>

<p><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=3J4QE5QBJU84Q"><img src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" alt="Paypal" /></a></p>

<p>That&rsquo;s all for me now, folks! I&rsquo;ll try to deliver stable releases
faster in the future, but I won&rsquo;t make any promises. Thanks for all
your help and support! I really appreciate them!</p>

<p><strong>P.S.</strong> I&rsquo;d love for Projectile to have a cool logo. Maybe someone can
help out with that as well?</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[Octopress 3.0]]>
  </title>
  <link href="http://batsov.com/articles/2015/02/15/octopress-3-dot-0/"/>
  <updated>2015-02-15T13:24:00+02:00
  </updated>
  <id>http://batsov.com/articles/2015/02/15/octopress-3-dot-0
  </id>
  <content type="html">
    <![CDATA[<p>Can&rsquo;t wait for
             <a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">Octopress 3.0</a>
             to be released! Octopress 2 is killing me and I was seriously
             considering going back to a plain Jekyll blog, before I saw 3.0 is right around the corner.</p>

<p>Any day now&hellip;</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[Introducing Inf-clojure - a Better Basic Clojure REPL for Emacs]]>
  </title>
  <link href="http://batsov.com/articles/2014/12/04/introducing-inf-clojure-a-better-basic-clojure-repl-for-emacs/"/>
  <updated>2014-12-04T12:45:00+02:00
  </updated>
  <id>http://batsov.com/articles/2014/12/04/introducing-inf-clojure-a-better-basic-clojure-repl-for-emacs
  </id>
  <content type="html">
    <![CDATA[<p>At <a href="http://clojure-conj.org/">Clojure/conj</a> I had the chance to shake
             Rich Hickey’s hand and exchange a few words with him. When I asked him
             whether he currently uses CIDER or Cursive for Clojure development he
             replied that he preferred a simpler solution – <code>clojure-mode</code> &amp;
             <code>inferior-lisp-mode</code>. I was a bit surprised because <code>clojure-mode</code>’s
             integration with <code>inferior-lisp-mode</code> sucks (big time). It has always
             been extremely limited and was never really improved/extended. It has
             no Clojure specific features and no code completion. I felt that Rich
             and all the people using inferior-lisp-mode deserved something better,
             so I quickly put together <a href="https://github.com/clojure-emacs/inf-clojure">inf-clojure</a>.</p>

<p><code>inf-clojure</code> provides some Clojure specific features like showing a
var’s doc or source, derives some core functionality from <code>clojure-mode</code>
and even features basic code-completion (and <code>company-mode</code>
support). That’s not much admittedly, but it’s a good start. Extending
<code>inf-clojure</code> is super easy and I expect that we’ll add a bit more
features to it along the way (e.g. macroexpansion).</p>

<p><code>inf-clojure</code> is available in MELPA and will eventually replace
completely <code>inferior-lisp-mode</code> when <code>clojure-mode</code> 4.0 is released.</p>

<p>Keep in mind that <code>inf-clojure</code> is nothing like CIDER and will never
be. CIDER will always be the powertool for Clojure programming in
Emacs. I do understand, however, that some people are overwhelmed by
CIDER and some people simply don’t need anything sophisticated. I hope
they’ll enjoy <code>inf-clojure</code>!</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[A CIDER Unsession at Clojure/conj]]>
  </title>
  <link href="http://batsov.com/articles/2014/11/15/a-cider-unsession-at-clojure-slash-conj/"/>
  <updated>2014-11-15T20:17:00+02:00
  </updated>
  <id>http://batsov.com/articles/2014/11/15/a-cider-unsession-at-clojure-slash-conj
  </id>
  <content type="html">
    <![CDATA[<p>I&rsquo;ll be talking about the evolution of CIDER at the
             <a href="http://clojure-conj.org/">conj</a>, but I won&rsquo;t be able to show much (in
             terms of features) during my talk. Luckily, however, beside the talks
             we also have the option for <a href="https://github.com/cognitect/clojure-conj/wiki/Clojure-conj-2014-Unsessions">unsessions</a>. Here&rsquo;s my proposal for one such unsession&hellip;</p>

<p>I&rsquo;d like to do a more extensive demonstration of the general
workflow with CIDER and all the cool things we&rsquo;ve done recently and
I&rsquo;d also like discuss with our users (and potential users) existing
problems, ideas for improvements and the future direction of the
project. If you like my idea you can show your support for it
<a href="https://github.com/cognitect/clojure-conj/wiki/Clojure-conj-2014-Unsessions#cider-demoqa">here</a>.</p>

<p>Feedback is important and I&rsquo;d like to get as much as possible
to make CIDER better!</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[A Profiling Extension for CIDER]]>
  </title>
  <link href="http://batsov.com/articles/2014/11/15/a-profiling-extension-for-cider/"/>
  <updated>2014-11-15T20:16:00+02:00
  </updated>
  <id>http://batsov.com/articles/2014/11/15/a-profiling-extension-for-cider
  </id>
  <content type="html">
    <![CDATA[<p><a href="https://github.com/edw">Edwin Watkeys</a> has just released a
             <a href="https://github.com/thunknyc/nrepl-profile">profiling extension for CIDER</a>,
             based on his library
             <a href="http://github.com/thunknyc/profile">profile</a>. The profiling data you&rsquo;ll get
             is rather crude, but it&rsquo;s still better than nothing and is certainly nicer
             than what you&rsquo;d get by using <code>time</code>.</p>

<p>Here you can see the extension in action:</p>

<p><img src="https://camo.githubusercontent.com/636b6897b279bb761f3377f6e002bbdb8b474937/68747470733a2f2f7261772e6769746875622e636f6d2f7468756e6b6e79632f6e7265706c2d70726f66696c652f6d61737465722f646f632f70726f66696c652d73637265656e73686f742e706e67"></p>

<p>Check out the documentation of both projects for more details.</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[RuboCop plugin for RubyMine]]>
  </title>
  <link href="http://batsov.com/articles/2014/11/12/rubocop-plugin-for-rubymine/"/>
  <updated>2014-11-12T14:16:00+02:00
  </updated>
  <id>http://batsov.com/articles/2014/11/12/rubocop-plugin-for-rubymine
  </id>
  <content type="html">
    <![CDATA[<p>Good news, RubyMine users!</p>

<p>Yesterday <a href="https://github.com/sirlantis">Marcel Jackwerth</a> released the initial version of a <a href="https://github.com/sirlantis/rubocop-for-rubymine">RuboCop plugin for
RubyMine/IntelliJ IDEA</a>. Here&rsquo;s the plugin in action:</p>

<p><img src="https://cloud.githubusercontent.com/assets/56807/5009481/9bbee3b4-6a67-11e4-8bf9-2a32c3bc3d5e.png"></p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[The Road to CIDER 0.8]]>
  </title>
  <link href="http://batsov.com/articles/2014/11/10/the-road-to-cider-0-dot-8/"/>
  <updated>2014-11-10T15:27:00+02:00
  </updated>
  <id>http://batsov.com/articles/2014/11/10/the-road-to-cider-0-dot-8
  </id>
  <content type="html">
    <![CDATA[<p>I&rsquo;m planning to release the long overdue <a href="https://github.com/clojure-emacs/cider">CIDER</a> 0.8 at <a href="http://clojure-conj.org/">clojure/conj</a> 2014.
             I&rsquo;ll be giving a talk there that will be mostly about CIDER, so this seems like a pretty good idea to me.</p>

<p>I&rsquo;d like to ask you to do a bit of extra testing to the current
snapshot builds, so we can deliver a solid release (if we&rsquo;re lucky &ndash;
the most solid ever). Guess you should pay extra attention to the
<a href="https://github.com/clojure-emacs/cider/blob/master/CHANGELOG.md">new features</a>.</p>

<p>If you want to get some issue fixed in time for 0.8 you&rsquo;d better <a href="https://github.com/clojure-emacs/cider/issues">get started right away</a>.</p>

<p>Thanks in advance for your help!</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[clojure-mode 3.0]]>
  </title>
  <link href="http://batsov.com/articles/2014/09/05/clojure-mode-3-dot-0/"/>
  <updated>2014-09-05T15:15:00+03:00
  </updated>
  <id>http://batsov.com/articles/2014/09/05/clojure-mode-3-dot-0
  </id>
  <content type="html">
    <![CDATA[<p><a href="https://github.com/clojure-emacs/clojure-mode">clojure-mode</a> 3.0 is out!</p>

<p>It&rsquo;s one of the most ambitious releases in recent times and brings
much improved font-locking across the board.  Other notable changes
include dropping support for Emacs 23 (CIDER doesn&rsquo;t support it
either) and removing some deprecated features (most notably the
functionality for switching between code and its test; see
<a href="https://github.com/bbatsov/projectile">Projectile</a> for an awesome
replacement of the old feature).</p>

<p>An extensive list of the changes is available <a href="https://github.com/clojure-emacs/clojure-mode/blob/master/CHANGELOG.md">here</a>.</p>

<p>This version also marks the introduction of an automated test suite
(currently it consists mostly of font-lock tests), which should make
it easier to do changes in the future.</p>

<p>Next step &ndash; indentation improvements and decoupling <code>clojure-mode</code>
from <code>lisp-mode</code>.  Both tasks are related. We&rsquo;ve been deriving much
from <code>lisp-mode</code> since day 1 and this has worked reasonably well so
far, but the truth is that Clojure is not Common Lisp (or Emacs Lisp
for that matter) and would benefit from a more refined syntax table,
indentation rules, etc.</p>

<p>When (if) this will happen?
Sadly, I have no idea&hellip; Help is definitely welcome! If you
don&rsquo;t have the time to help out with code or docs you can still support my
work on <code>clojure-mode</code> (and all my other projects) via
<a href="https://www.gratipay.com/bbatsov">gratipay</a>.</p>

<p><a href="https://gratipay.com/bbatsov"><img src="https://cdn.rawgit.com/gratipay/gratipay-badge/2.1.3/dist/gratipay.png" alt="Support via Gratipay" /></a></p>

<p>That&rsquo;s all for now, folks! Enjoy the new <code>clojure-mode</code>!</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[RuboCop Logo]]>
  </title>
  <link href="http://batsov.com/articles/2014/09/05/rubocop-logo/"/>
  <updated>2014-09-05T14:16:00+03:00
  </updated>
  <id>http://batsov.com/articles/2014/09/05/rubocop-logo
  </id>
  <content type="html">
    <![CDATA[<p>Meet <a href="https://github.com/bbatsov/rubocop">RuboCop</a>&rsquo;s brand new official logo!</p>

<p><img src="http://batsov.com/images/articles/rubocop-logo.png"></p>

<p>RuboCop&rsquo;s logo was created by
<a href="https://www.chadomoto.com/">Dimiter Petrov</a> (the best designer I&rsquo;ve
ever worked with!). You can find the logo in various formats
<a href="https://github.com/bbatsov/rubocop/tree/master/logo">here</a>.</p>

<p>The logo is licensed under a
<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.en_GB">Creative Commons Attribution-NonCommercial 4.0 International License</a>.</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[SICP Distilled]]>
  </title>
  <link href="http://batsov.com/articles/2014/08/29/sicp-distilled/"/>
  <updated>2014-08-29T18:15:00+03:00
  </updated>
  <id>http://batsov.com/articles/2014/08/29/sicp-distilled
  </id>
  <content type="html">
    <![CDATA[<p><a href="https://www.kickstarter.com/projects/1751759988/sicp-distilled">SICP Distilled</a>
             is one of the most interesting Kickstarter projects I&rsquo;ve seen in a
             while.</p>

<p>Its creator <a href="http://www.thattommyhall.com/">Tom Hall</a> is
planning to create some nice companion resources for <a href="http://sicpebook.wordpress.com/">SICP</a> with code
examples in Clojure. In his own words:</p>

<blockquote><p>It’s a long book, with lots<br/>of exercises and lots of people I know have started, loved it, but<br/>somehow not finished.</p><p>Abelson and Sussman themselves highlight the important lessons of SICP<br/>in their paper `Lisp: A Language For Stratified Design` and I have my<br/>own favourite bits.</p><p>As the book itself is available online for free I want to make the<br/>perfect accompaniment to it - an ebook summarising the key ideas,<br/>short videos describing them, screencasts of solving some of the<br/>exercises, translation of the examples into Clojure, example projects,<br/>partial solutions for you to complete (similar to `4clojure` and `Clojure<br/>koans`) and a place to discuss solving them with people and hopefully<br/>keep momentum and get it finished!</p><p>Something to be enjoyed alongside SICP, rather than completely replace it.</p><p>Maybe some ideas come out a little different in Clojure, or I take a<br/>slightly novel approach (hence idiosyncratic), maybe I miss something<br/>out (hence tour, sorry), but I hope we can have some fun along the<br/>way.</p><footer><strong>Tom Hall</strong> <cite>SICP Distilled</cite></footer></blockquote>


<p>I&rsquo;m one of those many people who never did finish SICP (although I
hope to do that some day), so I can totally relate to Tom&rsquo;s
words. I&rsquo;ve already backed his campaign and I hope more of you will do
the same!</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[The Elements of Style in Ruby #14: Variable Interpolation]]>
  </title>
  <link href="http://batsov.com/articles/2014/08/13/the-elements-of-style-in-ruby-number-14-variable-interpolation/"/>
  <updated>2014-08-13T16:27:00+03:00
  </updated>
  <id>http://batsov.com/articles/2014/08/13/the-elements-of-style-in-ruby-number-14-variable-interpolation
  </id>
  <content type="html">
    <![CDATA[<p>Most experienced Rubyists probably know that there are two ways to interpolate instance, class and global variables into
             strings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># compact notation (works only for instance/class/global vars)</span>
</span><span class='line'><span class="s2">&quot;this is </span><span class="si">#$some_var</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># standard notation (works for any expression)</span>
</span><span class='line'><span class="s2">&quot;this is </span><span class="si">#{</span><span class="vg">$some_var</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you&rsquo;ve noticed you can leave out the <code>{}</code> which can&rsquo;t be left out for any other expression. Some people find this
interpolation syntax concise and elegant, but I&rsquo;ll argue that it should be avoided. Here&rsquo;s why:</p>

<ul>
<li>You can&rsquo;t use this notation in every possible scenario:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># this is fine</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@variable</span><span class="si">}</span><span class="s2">string_straight_after_without_space&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># but this means something totally different</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#@variablestring_straight_after_without_space</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means that using the compact notation only when applicable forces you to introduce some inconsistency in your code.
This is rarely good&hellip;</p>

<ul>
<li>You&rsquo;re using different notations for the same basic operation (interpolation), without getting anything in return.
That&rsquo;s not the same with semantic use of single and double quoted strings or <code>fail</code> and <code>raise</code>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># using compact</span>
</span><span class='line'><span class="s2">&quot;this is </span><span class="si">#@x</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&quot;this is </span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># using standard</span>
</span><span class='line'><span class="s2">&quot;this is </span><span class="si">#{</span><span class="vi">@x</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&quot;this is </span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>It&rsquo;s easy to make a mistake in the context of a regular expression
(as interpolation works in regexp literals).  Recently I saw the
following regexp &ndash; <code>/[0-9.(),;:!?%#$?\x27\x22_+=\\\/\-]*/</code>. There&rsquo;s a
subtle problem with it, that&rsquo;s not obvious (unless you have a good
editor, that is). The sequence <code>#$?</code> is interpreted as interpolation
of the global variable <code>$?</code> (a.k.a. <code>$CHILD_STATUS</code>) and this regexp doesn&rsquo;t work as intended.</li>
</ul>


<p>This scenario shows that the syntax was ill-conceived.</p>

<ul>
<li>Non-experience Rubyists probably don&rsquo;t know about the compact interpolation notation.
Few books and tutorials mention it these days, so using it your code will confuse at least
some of the people reading it.</li>
</ul>


<hr />

<p>It seems to me that Ruby will be better off without a special syntax
for variable interpolation. Ideally it would be removed in Ruby 3 and
we&rsquo;ll have one less thing to worry about in our Ruby code.</p>

<p>That&rsquo;s all for today, folks!</p>

<p>As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
    ]]>
</content>
</entry>

<entry>
  <title type="html">
    <![CDATA[The State of Some Emacs Packages for Clojure Development]]>
  </title>
  <link href="http://batsov.com/articles/2014/08/12/the-state-of-some-emacs-packages-for-clojure-development/"/>
  <updated>2014-08-12T11:29:00+03:00
  </updated>
  <id>http://batsov.com/articles/2014/08/12/the-state-of-some-emacs-packages-for-clojure-development
  </id>
  <content type="html">
    <![CDATA[<p>There are quite a few packages in the &ldquo;official&rdquo;
             <a href="https://github.com/clojure-emacs">clojure-emacs GitHub organization</a>,
             but many of them have been deprecated recently with the release of
             CIDER 0.7. Unfortunately not everyone is aware of this yet and I often see
             tickets related to those deprecated projects. In this short post I&rsquo;ll
             outline the deprecations and provide a bit of background for them.</p>

<h3>clojure-test-mode</h3>

<p>The venerable
<a href="https://github.com/clojure-emacs/clojure-mode">clojure-test-mode</a> was
deprecated in favor of <code>cider-test</code> (which is bundled with CIDER 0.7).
<code>clojure-test-mode</code> featured quite a lot of inlined Clojure code,
which made the package very hard to maintain and reworking it to use
nREPL middleware was a no-brainer for us. <code>clojure-test-mode</code> will be
removed from the <code>clojure-mode</code> repo at some point. It also interferes
with CIDER&rsquo;s initialization, so you&rsquo;re <strong>strongly encouraged</strong> to get rid of it.</p>

<p>Down the road we might extend <code>cider-test</code> to support other test frameworks
as well (which should be feasible with different middleware providing the same interface).</p>

<h3>company-cider</h3>

<p><a href="https://github.com/clojure-emacs/company-cider">company-cider</a> was deprecated, because <code>company-mode</code>
integration was added to CIDER itself (making <code>company-mode</code> the officially supported and recommended
completion library).</p>

<h3>ac-nrepl</h3>

<p><a href="https://github.com/clojure-emacs/ac-nrepl">ac-nrepl</a> has been
superseded by <a href="https://github.com/clojure-emacs/ac-cider">ac-cider</a>.
<code>ac-cider</code> has a simpler codebase and leverages the <code>compliment</code>-based completion
introduced in CIDER 0.7. We&rsquo;ll probably remove <code>ac-nrepl</code> at some point in the future
to avoid the confusion between the two.</p>

<h3>cider-inspect</h3>

<p><a href="https://github.com/clojure-emacs/cider-inspect">cider-inspect</a> was absorbed into CIDER 0.7.</p>

<h3>cider-tracing</h3>

<p><a href="https://github.com/clojure-emacs/cider-tracing">cider-tracing</a> was superseded by middleware-based
tracing support integrated in CIDER 0.7.</p>

<h2>Epilogue</h2>

<p>Those deprecations are also mentioned in the documentation of the
respective packages, but I feel it&rsquo;s nice to have them listed together
in a single document. Most of the packages will also emit load-time
deprecation warnings.</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[CIDER 0.7]]>
  </title>
  <link href="http://batsov.com/articles/2014/08/05/cider-0-dot-7/"/>
  <updated>2014-08-05T15:19:00+03:00
  </updated>
  <id>http://batsov.com/articles/2014/08/05/cider-0-dot-7
  </id>
  <content type="html">
    <![CDATA[<p><a href="https://github.com/clojure-emacs/cider">CIDER</a> 0.7 is finally out and
             it&rsquo;s an epic release! It&rsquo;s without a doubt the most important release
             since the inception of the project about two years ago and it&rsquo;s the
             biggest one in terms of features and code changes.</p>

<p>The release is special for a number of reasons. Allow me to quickly
enumerate though them.</p>

<h3>Middleware-based</h3>

<p>One of the huge problems we&rsquo;ve had so far was that a lot of
functionality that was present in SLIME + swank-clojure was missing in
CIDER. For many people the transition between the two didn&rsquo;t really
feel like an upgrade (although it was advertised as such) &ndash; after all
they lost things like inspection, tracing, apropos, caller cross-reference, the
debugger, etc.</p>

<p>The reason this happened was CIDER&rsquo;s initial approach of implementing
features by inlining Clojure code within the Emacs Lisp code and
evaluating this code in a dedicated nREPL session (called the tooling
session), to avoid contaminating the results in the &ldquo;primary&rdquo; eval
session. This approach had one upside (you didn&rsquo;t need any extra deps
(middleware) to run CIDER) and one huge downside (it&rsquo;s impossible
to maintain non-trivial inlined code; not to mention it&rsquo;s not very
practical). This meant that pretty much all third party libs were out
of the equation and pretty much every advanced feature.</p>

<p>This problem was initially address by
<a href="https://github.com/pallet/ritz">ritz</a>, which provided some extra
functionality built on top of extra nREPL middleware. As it was a
separate project it was hard to be kept in sync with the flurry of
changes in CIDER and was abandoned at some point. While <code>ritz</code> failed
it had the right approach and it served as the principle inspiration
for CIDER 0.7.</p>

<p>In CIDER 0.6 we introduced optional nREPL middleware for some
operations (like completion, error reporting, var info) and in 0.7 the
middleware stack was greatly extended, improved and promoted to a
mandatory CIDER component. This has one downside (you&rsquo;ll have to
install it to leverage all of CIDER&rsquo;s power) and a several upsides:</p>

<ul>
<li><p>A lot of the heavy lifting is now done in pure Clojure code (see
<a href="https://github.com/clojure-emacs/cider-nrepl">cider-nrepl</a>) and it&rsquo;s
much easier to implement complex features now (not to mention &ndash; this
code is much easier to maintain). This also means that it&rsquo;s much
easier for Clojure programmers to contribute to CIDER as a lot of
functionality is just lots of Clojure code and very little Emacs Lisp
code. I&rsquo;m reasonably sure I&rsquo;m one of the very few CIDER users who
knows more Emacs Lisp than Clojure, so I consider this a big win.</p></li>
<li><p>It&rsquo;s now easy to provide pretty similar level of support for both
Clojure and ClojureScript as we can reconcile the differences
between them in our middleware.</p></li>
<li><p>It&rsquo;s easier to keep the code backwards compatible (which is a
nightmare for inlined code).</p></li>
<li><p>There are no implicit dependencies in the system (unlike before).</p></li>
</ul>


<p>Consider auto-completion &ndash; this feature was implemented in terms of
evaluating some <code>clojure-complete</code> code with the assumption that
<code>clojure-complete</code> is available in the environment you were using as
CIDER assumed you had started the nREPL server using <code>lein repl</code>. This
would fire up a REPL-y REPL and <code>clojure-complete</code> is a REPL-y
dependency. Not everyone uses <code>lein repl</code>, though and REPL-y can always
switch to another completion library in the future.</p>

<p>If you connected CIDER to an embedded nREPL server,
you&rsquo;d be greeted by a missing class error, as most apps don&rsquo;t normally
depend on <code>clojure-complete</code>. You&rsquo;d be puzzled for a while, but eventually
you&rsquo;ll realize what the problem is.</p>

<p>Now we&rsquo;re free to explicitly specify our deps and pick the best
libraries for the job (as opposed to those that are available) &ndash;
you&rsquo;ll quickly notice how smarter auto-completion is now on Clojure,
because we&rsquo;re internally using the newer, faster and more feature-rich
<a href="https://github.com/alexander-yakushev/compliment">compliment</a> library
(note that we&rsquo;re using a different library for ClojureScript
completion).
* Other projects can leverage some of our middleware &ndash; somewhat
amusingly for Emacs users, <code>vim-fireplace</code> is using <code>cider-nrepl</code>
as well.</p>

<p>At this point we&rsquo;ve removed pretty much all inlined code (except some
pretty-printing code) and that has yielded much improved eldoc,
macroexpansion, documentation viewing (<code>cider-doc</code> will now display
Javadoc in Emacs!!!), source browsing, etc.</p>

<p>We&rsquo;ve also started bringing back some features we loved in SLIME, but
were missing so far &ndash; the inspector, apropos and tracing are back. We&rsquo;re now working on
bringing back function call cross-referencing and debugging as well.</p>

<p>Note that CIDER will still work if you connect to an nREPL server
that&rsquo;s not using CIDER&rsquo;s middleware. In this case you&rsquo;ll get a
warning and a pretty limited feature-set &ndash; source file loading, code
evaluation, pretty-printing and error highlighting.</p>

<h3>cider-test</h3>

<p><code>clojure-test-mode</code> (which was more or less abandoned in terms of
maintenance) finally has a successor in CIDER itself. <code>cider-test</code>
provides more or less the same functionality, but is implemented in
terms of nREPL middleware and is a more robust solution. As it&rsquo;s part
of CIDER it cannot ever be out-of-sync with CIDER as <code>clojure-test-mode</code> has
often been lately.</p>

<p><code>cider-test</code> is a little rough around the edges, but I&rsquo;m fairly sure it has bright future
ahead. Use it, love it, hate it and send us your feedback! We&rsquo;d love to hear it.</p>

<p><strong>P.S.</strong> We might extend this with support for other frameworks like
<code>midje</code> and <code>expectations</code>, although that&rsquo;s not high on our priority
list.</p>

<h3>Grimoire support</h3>

<p>In addition to built-in Clojure &amp; Javadoc you can now peruse the
extended documentation provided by
<a href="http://grimoire.arrdem.com/">Grimoire</a> from the comfort of your
beloved editor. No more browser interruptions just to get a few usage
examples of some function! <code>C-c C-d g</code> for the win!</p>

<p>Adding some extended Grimoire integration is definitely on the roadmap.</p>

<h3>Increased bus factor</h3>

<p>One of the biggest problems of the project so far was that fairly few people
were involved with it.  At one point it was mostly Tim, Hugo and
me. At another it was mostly me. The bus factor was dangerously close
to 1, which always worried me. Recently, however, a lot of people have
been helping quite actively, which makes me more optimistic about the
future. As much as I love CIDER I don&rsquo;t want it to depend on one
extremely busy and very clumsy person (each time I go hiking there&rsquo;s a
serious chance I&rsquo;ll fall of a cliff or something).</p>

<p>I&rsquo;d like to thank everyone for your wonderful contributions and single
out a bunch of people for some outstanding work done by them:</p>

<ul>
<li><a href="https://github.com/gtrak">Gary Trakhman</a> is the one responsible for
the good ClojureScript support we now boast. Fantastic work, Gary! You have a big thanks from me!</li>
<li><a href="https://github.com/jeffvalk">Jeff Valk</a> did some mighty fine work
on the var info retrieval, source navigation, documentation display
and single-handedly implemented <code>cider-test</code> and <code>cider-apropos</code>. We
all owe Jeff a huge thanks!</li>
<li><a href="https://github.com/hugoduncan">Hugo Duncan</a> who constantly
contributed patches, bug reports and ideas. His <code>nrepl-ritz</code>
project provided a lot of inspiration for some of the existing
middleware.</li>
<li><a href="https://github.com/eslick">Ian Eslick</a> contributed the new inspector.</li>
<li><a href="https://github.com/alexander-yakushev/compliment">Alexander Yakushev</a>
made so many improvements to his awesome <code>compliment</code>
library for the needs of CIDER. Did you notice that you now get
completion suggestions for <strong>locals</strong>? How amazing is that!</li>
<li><a href="https://github.com/dgutov">Dmitry Gutov</a> implemented native support in CIDER for <code>company-mode</code>.</li>
</ul>


<h2>The Road Before Us</h2>

<p>Obviously our work is far from over &ndash; we&rsquo;re still lacking some crucial
features (most notably a debugger) and a lot of code needs
polish. This will obviously take some time and a lot of work to get right, but I&rsquo;m
confident we&rsquo;ll get there.</p>

<p>I&rsquo;d also want us to work a bit in the area of documentation &ndash; a
manual, a cheatsheet, etc. Have a look at the
<a href="https://github.com/clojure-emacs/cider/issues">issue tracker</a> if
you&rsquo;d like to help out &ndash; we definitely need all the help we can get.</p>

<p>The 0.7 release required a massive amount of work and we spent more that 3 months to get it to
a shippable state. With the bulk of the work behind us I hope we&rsquo;ll be able to deliver new
releases more frequently &ndash; on a monthly (or bi-monthly) basis.</p>

<p>I&rsquo;d love to be able to raise a lot of money via crowd-funding and work
on CIDER for an year or get hired by some company to work full-time on
it, but that&rsquo;s not going to happen. For one reason or another people
rarely get excited about dev tools, so all of us have to work together
to make CIDER the ultimate Clojure(Script) development environment.</p>

<p>If I knew how much work I&rsquo;d have to do when I assumed the maintenance
of CIDER exactly one year ago I might not have done it. Maintaining a
project that&rsquo;s pivotal to an entire community (I recall some article
mentioning about half the Clojure devs were using it) is both a lot of
work and a lot of stress and pressure. That said, it&rsquo;s probably my
favourite OSS project and I enjoy working on it immensely. If you
don&rsquo;t have the time to help out with code or docs you can still support my
work on CIDER (and all my other projects) via
<a href="https://www.gittip.com/bbatsov">gittip</a>.</p>

<p><a href="https://www.gittip.com/bbatsov"><img src="https://rawgithub.com/twolfson/gittip-badge/0.2.0/dist/gittip.png" alt="Support via Gittip" /></a></p>

<p>For all the gory details regarding new features and changes in CIDER 0.7 &ndash; take a look at the
<a href="https://github.com/clojure-emacs/cider/blob/master/CHANGELOG.md">changelog</a>.</p>

<p>That&rsquo;s all from me, folks! Use CIDER, drink cider and prosper!</p>
    ]]>
</content>
</entry>

<entry>
  <title type="html">
    <![CDATA[Permalinks in the Clojure style guide]]>
  </title>
  <link href="http://batsov.com/articles/2014/07/25/permalinks-in-the-clojure-style-guide/"/>
  <updated>2014-07-25T16:42:00+03:00
  </updated>
  <id>http://batsov.com/articles/2014/07/25/permalinks-in-the-clojure-style-guide
  </id>
  <content type="html">
    <![CDATA[<p>I&rsquo;m happy to report that now you can use permalinks to the rules listed in the
             community <a href="https://github.com/bbatsov/clojure-style-guide">Clojure style guide</a> as well.</p>

<p>Here&rsquo;s an
<a href="https://github.com/bbatsov/clojure-style-guide#when-instead-of-single-branch-if">example</a>.
Now you can easily refer to rules in heated style debates with your
friends and co-workers. :&ndash;)</p>

<p>This is an addition that was way overdue (for which I take all the
blame). I&rsquo;d like to say a big <code>THANKS!!!</code> to <a href="https://github.com/rbf">rbf</a> who
found the time I never did and got the job done (in style).</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[Permalinks in the Ruby and Rails style guides]]>
  </title>
  <link href="http://batsov.com/articles/2014/07/25/permalinks-in-the-ruby-and-rails-style-guides/"/>
  <updated>2014-07-25T16:34:00+03:00
  </updated>
  <id>http://batsov.com/articles/2014/07/25/permalinks-in-the-ruby-and-rails-style-guides
  </id>
  <content type="html">
    <![CDATA[<p>I&rsquo;m happy to report that now you can use permalinks to the rules listed in the
             community <a href="https://github.com/bbatsov/ruby-style-guide">Ruby</a> and <a href="https://github.com/bbatsov/rails-style-guide">Rails</a> style guides.</p>

<p>Here&rsquo;s an
<a href="https://github.com/bbatsov/ruby-style-guide#indent-when-to-case">example</a>.
Now you can easily refer to rules in heated style debates with your
friends and co-workers. :&ndash;)</p>

<p>This is an addition that was way overdue (for which I take all the
blame). I&rsquo;d like to say a big <code>THANKS!!!</code> to <a href="https://github.com/todb">Tod Beardsley</a> who
found the time I never did and got the job done (in style).</p>

<p><strong>P.S.</strong> Hopefully soon the permalinks will be leveraged by RuboCop.</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[Find out where a rake task is defined]]>
  </title>
  <link href="http://batsov.com/articles/2014/05/30/find-out-where-a-rake-task-is-defined/"/>
  <updated>2014-05-30T17:23:00+03:00
  </updated>
  <id>http://batsov.com/articles/2014/05/30/find-out-where-a-rake-task-is-defined
  </id>
  <content type="html">
    <![CDATA[<p>Have you ever wondered where a particular rake task is defined? Enter <code>rake -W</code> (introduced in <code>rake</code> 0.9):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake -W db:schema:load
</span><span class='line'>
</span><span class='line'>rake db:schema:load                 /Users/bozhidar/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/activerecord-4.1.1/lib/active_record/railties/databases.rake:236:in `block (2 levels) in &lt;top (required)&gt;'
</span><span class='line'>rake db:schema:load_if_ruby         /Users/bozhidar/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/activerecord-4.1.1/lib/active_record/railties/databases.rake:240:in `block (2 levels) in &lt;top (required)&gt;'</span></code></pre></td></tr></table></div></figure>


<p>You can also invoke <code>rake -W</code> without an argument and you&rsquo;ll get a listing of all available rake tasks and their source locations.</p>

<p>Pretty neat, right?</p>
    ]]>
  </content>
</entry>

<entry>
  <title type="html">
    <![CDATA[The Elements of Style in Ruby #13: length vs size vs count]]>
  </title>
  <link href="http://batsov.com/articles/2014/02/17/the-elements-of-style-in-ruby-number-13-length-vs-size-vs-count/"/>
  <updated>2014-02-17T18:55:00+02:00
  </updated>
  <id>http://batsov.com/articles/2014/02/17/the-elements-of-style-in-ruby-number-13-length-vs-size-vs-count
  </id>
  <content type="html">
    <![CDATA[<p>One of the problems newcomers to Ruby experience is that there are
             often quite a few ways to do same thing. For instance &ndash; you can obtain
             the number of items in <code>Enumerable</code> objects (instances of classes
             using the <code>Enumerable</code> mixin, which would often be collections like
             <code>Array</code>, <code>Hash</code>, <code>Set</code>, etc) by either using <code>Enumerable#count</code> or the
             methods <code>length</code> and its alias <code>size</code> that such classes often
             provide.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">size</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 2</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">size</span> <span class="c1"># =&gt; 2</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">count</span> <span class="c1"># =&gt; 2</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 4</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">size</span> <span class="c1"># =&gt; 4</span>
</span><span class='line'><span class="c1"># str.count won&#39;t work as String does not include Enumerable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which one should you use? Let me help with this choice.</p>

<p><code>length</code> is a method that&rsquo;s not part of <code>Enumerable</code> &ndash; it&rsquo;s part of a
concrete class (like <code>String</code> or <code>Array</code>) and it&rsquo;s usually running in
<code>O(1)</code> (constant) time. That&rsquo;s as fast as it gets, which means that
using it is probably a good idea.</p>

<p>Whether you should use <code>length</code> or <code>size</code> is mostly a matter of
personal preference.  Personally I use <code>size</code> for collections (hashes,
arrays, etc) and <code>length</code> for strings, since for me objects like
hashes and stacks don&rsquo;t have a length, but a size (defined in terms of
the elements they contain). Conversely, it&rsquo;s perfectly normal to
assume that some text has some length. Anyways, in the end you&rsquo;re
invoking the same method, so the semantic distinction is not
important.</p>

<p><code>Enumerable#count</code>, on the other hand, is a totally different
beast. It&rsquo;s usually meant to be used with a block or an argument and
will return the number of matches in an <code>Enumerable</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span> <span class="c1"># =&gt; 3</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># =&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can, however, invoke it without any arguments and it will return the size of the enumerable on which it was invoked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="c1"># =&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a performance implication with this, though &ndash; to calculate the
size of the enumerable the <code>count</code> method will traverse it, which is
not particularly fast (especially for huge collections). Some classes
(like <code>Array</code>) implement an optimized version of <code>count</code> in terms of
<code>length</code>, but many don&rsquo;t.</p>

<p>The takeaway for you is that you should
avoid using the <code>count</code> method if you can use <code>length</code> or <code>size</code>.</p>

<p>A note to Rails developers &ndash; <code>ActiveRecord::Relation</code>&rsquo;s <code>length</code>,
<code>size</code> and <code>count</code> methods have a totally different meaning, but that&rsquo;s
irrelevant to our current discussion. (<code>Sean Griffin</code> has written
<a href="http://batsov.com/articles/2014/02/17/the-elements-of-style-in-ruby-number-13-length-vs-size-vs-count/#comment-1248998887">a comment regarding it</a>).</p>

<p>That&rsquo;s all for now, folks! As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
    ]]>
</content>
</entry>

<entry>
  <title type="html">
    <![CDATA[A list of deprecated stuff in Ruby]]>
  </title>
  <link href="http://batsov.com/articles/2014/02/05/a-list-of-deprecated-stuff-in-ruby/"/>
  <updated>2014-02-05T18:37:00+02:00
  </updated>
  <id>http://batsov.com/articles/2014/02/05/a-list-of-deprecated-stuff-in-ruby
  </id>
  <content type="html">
    <![CDATA[<p>As APIs evolve it&rsquo;s inevitable that portions of them will be deprecated. Generally it&rsquo;s fairly
             easy to find out what&rsquo;s deprecated, but for several reasons that&rsquo;s not the case in Ruby:</p>

<ul>
<li>Deprecation is done through the use of C functions such as <code>rb_warn</code> &amp; <code>rb_warning</code> (as opposed to some more
transparent methods as Java&rsquo;s <code>@deprecated</code> annotation). To see the deprecation messages from those functions
you&rsquo;ll have to run Ruby with <code>-w</code>. Consider this example code:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">lines</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="o">-</span><span class="n">w</span> <span class="nb">test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="nb">test</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="ss">warning</span><span class="p">:</span> <span class="n">passing</span> <span class="n">a</span> <span class="n">block</span> <span class="n">to</span> <span class="nb">String</span><span class="c1">#lines is deprecated</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Alternative Ruby implementations (like <code>JRuby</code> and <code>Rubinius</code>)
generally don&rsquo;t produce the same deprecation warnings. For instance &ndash;
<code>JRuby</code> doesn&rsquo;t produce any warnings for the code listed above. One
can say that currently deprecations are an MRI implementation detail
(although they shouldn&rsquo;t be).</p></li>
<li><p>Deprecations are rarely mentioned in the API docs.</p></li>
<li><p>There&rsquo;s no easy way to find out in which version of Ruby
something got deprecated as <code>rb_warn</code> is a generic instrumentation for
producing all sorts of warnings, as opposed to something created specifically to handle
deprecations.</p></li>
<li><p>Some APIs are deprecated only informally (like
<a href="http://batsov.com/articles/2013/08/21/the-elements-of-style-in-ruby-number-9-hash-number-has-key-and-hash-number-has-value-are-deprecated/"><code>Hash#has_key?</code> and <code>Hash#has_value?</code></a>).</p></li>
<li><p>Some APIs are deprecated with <code>Kernel#warn</code> (like <code>Digest::Digest</code>).</p></li>
</ul>


<p>All of the above makes it fairly hard to compile a precise list of deprecations, but we&rsquo;ll go
only for a rough cut here. Let see what we can do&hellip;</p>

<p>Grepping in Ruby 2.1&rsquo;s code base reveals the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dir</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">2174</span><span class="p">:</span>    <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;Dir.exists? is a deprecated name, use Dir.exist? instead&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">enumerator</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">355</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;Enumerator.new without a block is deprecated; use Object#to_enum&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="o">/</span><span class="n">dbm</span><span class="o">/</span><span class="n">dbm</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">338</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;DBM#index is deprecated; use DBM#key&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="o">/</span><span class="n">gdbm</span><span class="o">/</span><span class="n">gdbm</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">453</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;GDBM#index is deprecated; use GDBM#key&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="o">/</span><span class="n">openssl</span><span class="o">/</span><span class="n">ossl_cipher</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">217</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;arguments for %s#encrypt and %s#decrypt were deprecated; &quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="o">/</span><span class="n">sdbm</span><span class="o">/</span><span class="n">init</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">331</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;SDBM#index is deprecated; use SDBM#key&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="o">/</span><span class="n">stringio</span><span class="o">/</span><span class="n">stringio</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">656</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;StringIO#bytes is deprecated; use #each_byte instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">876</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;StringIO#chars is deprecated; use #each_char instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">920</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;StringIO#codepoints is deprecated; use #each_codepoint instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">1124</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;StringIO#lines is deprecated; use #each_line instead&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="o">/</span><span class="n">zlib</span><span class="o">/</span><span class="n">zlib</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">3892</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;Zlib::GzipReader#bytes is deprecated; use #each_byte instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">4174</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;Zlib::GzipReader#lines is deprecated; use #each_line instead&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">1413</span><span class="p">:</span>    <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;%sexists? is a deprecated name, use %sexist? instead&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">529</span><span class="p">:</span>            <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;ignoring wrong elements is deprecated, remove them explicitly&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">934</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;Hash#index is deprecated; use Hash#key&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">3470</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;ENV.index is deprecated; use ENV.key&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">3385</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;IO#lines is deprecated; use #each_line instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">3436</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;IO#bytes is deprecated; use #each_byte instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">3590</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;IO#chars is deprecated; use #each_char instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">3697</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;IO#codepoints is deprecated; use #each_codepoint instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">11196</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;ARGF#lines is deprecated; use #each_line instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">11243</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;ARGF#bytes is deprecated; use #each_byte instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">11282</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;ARGF#chars is deprecated; use #each_char instead&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">11321</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;ARGF#codepoints is deprecated; use #each_codepoint instead&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">991</span><span class="p">:</span>    <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;untrusted? is deprecated and its behavior is same as tainted?&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">1005</span><span class="p">:</span>    <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;untrust is deprecated and its behavior is same as taint&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">1020</span><span class="p">:</span>    <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;trust is deprecated and its behavior is same as untaint&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">663</span><span class="p">:</span>    <span class="n">rb_warn</span><span class="p">(</span><span class="s2">&quot;rb_f_lambda() is deprecated; use rb_block_proc() instead&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">6407</span><span class="p">:</span>       <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;passing a block to String#lines is deprecated&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">6576</span><span class="p">:</span>       <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;passing a block to String#bytes is deprecated&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">6665</span><span class="p">:</span>       <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;passing a block to String#chars is deprecated&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">6769</span><span class="p">:</span>       <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;passing a block to String#codepoints is deprecated&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">vm_method</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">54</span><span class="p">:</span>    <span class="n">rb_warning</span><span class="p">(</span><span class="s2">&quot;rb_clear_cache() is deprecated.&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is a cleaned up list of the output shown above. I&rsquo;ve removed everything
that&rsquo;s unlikely to be of general interest.</p>

<ul>
<li><code>Dir.exists?</code> is a deprecated name, use <code>Dir.exist?</code> instead</li>
<li><code>Enumerator.new</code> without a block is deprecated; use <code>Object#to_enum</code></li>
<li><code>StringIO#bytes</code> is deprecated; use <code>StringIO#each_byte</code> instead</li>
<li><code>StringIO#chars</code> is deprecated; use <code>StringIO#each_char</code> instead</li>
<li><code>StringIO#codepoints</code> is deprecated; use <code>StringIO#each_codepoint</code> instead</li>
<li><code>StringIO#lines</code> is deprecated; use <code>StringIO#each_line</code> instead</li>
<li><code>File.exists?</code> is a deprecated name, use <code>File.exist?</code> instead</li>
<li><code>Hash#index</code> is deprecated; use <code>Hash#key</code></li>
<li><code>ENV.index</code> is deprecated; use <code>ENV.key</code></li>
<li><code>IO#lines</code> is deprecated; use <code>IO#each_line</code> instead</li>
<li><code>IO#bytes</code> is deprecated; use <code>IO#each_byte</code> instead</li>
<li><code>IO#chars</code> is deprecated; use <code>IO#each_char</code> instead</li>
<li><code>IO#codepoints</code> is deprecated; use <code>IO#each_codepoint</code> instead</li>
<li><code>ARGF#lines</code> is deprecated; use <code>ARGF#each_line</code> instead</li>
<li><code>ARGF#bytes</code> is deprecated; use <code>ARGF#each_byte</code> instead</li>
<li><code>ARGF#chars</code> is deprecated; use <code>ARGF#each_char</code> instead</li>
<li><code>ARGF#codepoints</code> is deprecated; use <code>ARGF#each_codepoint</code> instead</li>
<li><code>Object#untrusted?</code> is deprecated and its behavior is same as <code>Object#tainted?</code></li>
<li><code>Object#untrust</code> is deprecated and its behavior is same as <code>Object#taint</code></li>
<li><code>Object#trust</code> is deprecated and its behavior is same as <code>Object#untaint</code></li>
<li>passing a block to <code>String#lines</code> is deprecated</li>
<li>passing a block to <code>String#bytes</code> is deprecated</li>
<li>passing a block to <code>String#chars</code> is deprecated</li>
<li>passing a block to <code>String#codepoints</code> is deprecated</li>
</ul>


<p>Unfortunately there&rsquo;s no way to know in which version of Ruby
something got deprecated. Obviously most of the things on the list
were deprecated before Ruby 2.1. Ideally in the future we&rsquo;ll get a
better deprecation mechanism that actually keeps track of such data.</p>

<p>Hopefully some of you will find this information useful!</p>

<p>We&rsquo;re planning to get some deprecation tracking in <a href="https://github.com/bbatsov/rubocop">RuboCop</a>, but
due to Ruby&rsquo;s dynamic nature implementing such a feature reliably in a static code analyzer is an
impossible task.</p>
    ]]>
</content>
</entry>

<entry>
  <title type="html">
    <![CDATA[The Elements of Style in Ruby #12: proc vs Proc.new]]>
  </title>
  <link href="http://batsov.com/articles/2014/02/04/the-elements-of-style-in-ruby-number-12-proc-vs-proc-dot-new/"/>
  <updated>2014-02-04T16:20:00+02:00
  </updated>
  <id>http://batsov.com/articles/2014/02/04/the-elements-of-style-in-ruby-number-12-proc-vs-proc-dot-new
  </id>
  <content type="html">
    <![CDATA[<p>People are often confused about the fact that there are two ways to created <code>proc</code>s in Ruby &ndash;
             via <code>Kernel#proc</code> and <code>Proc.new</code>. Let&rsquo;s see them in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fe35440a058&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span> <span class="p">{</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fe35440a059&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmmm, it seems we get exactly the same results&hellip; While this is true
on Ruby 1.9+, this was not always the case.</p>

<p>In Ruby 1.8, <code>Kernel#proc</code> is actually a synonym for <code>Kernel#lambda</code>
which was extremely confusing, since as we all know <code>lambda</code>s an
<code>proc</code>s differ in
<a href="http://stackoverflow.com/questions/626/when-to-use-lambda-when-to-use-proc-new">subtle ways</a>. Luckily
sanity prevailed and Ruby 1.9 made <code>Kernel#proc</code> a synonym for
<code>Proc.new</code> instead.</p>

<p>At this point, however, people couldn&rsquo;t use <code>Kernel#proc</code> anymore if they
wanted to write code that&rsquo;s behaving in the same way on both Ruby 1.8
and Ruby 1.9 and the use of <code>Kernel#proc</code> was generally discouraged.
Thankfully Ruby 1.8 is now dead and buried and there&rsquo;s no reason to prefer
<code>Proc.new</code> over <code>Kernel#proc</code> anymore.  As a matter of fact &ndash; you
should probably be using only <code>Kernel#proc</code> as it&rsquo;s more concise and
it&rsquo;s symmetrical to <code>Kernel#lambda</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">lambda</span> <span class="p">{</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fe35440a058 (lambda)&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span> <span class="p">{</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fe35440a059&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, given <code>proc</code>&rsquo;s fairly counter-intuitive behavior regarding <code>return</code>, you should probably
use <code>lambda</code>s most of the time.</p>
    ]]>
  </content>
</entry>

</feed>
