<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/rss2full.xsl"?>
<?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0">
  <channel>
    <title>Lea Verou</title>
    <link>http://lea.verou.me</link>
    <description>Life at the bleeding edge (of web standards)</description>
    <lastBuildDate>Fri, 26 Aug 2016 20:11:28 +0000</lastBuildDate>
    <language>en-US</language>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <generator>https://wordpress.org/?v=4.6</generator>
    <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/rss+xml" href="http://feeds.feedburner.com/leaverou"/>
    <feedburner:info uri="leaverou"/>
    <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/"/>
    <feedburner:emailServiceId>leaverou</feedburner:emailServiceId>
    <feedburner:feedburnerHostname>https://feedburner.google.com</feedburner:feedburnerHostname>
    <item>
      <title>Markapp: A list of HTML libraries</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/7ilYG6MJKUI/</link>
      <comments>http://lea.verou.me/2016/08/markapp-a-list-of-html-libraries/#respond</comments>
      <pubDate>Fri, 26 Aug 2016 20:07:58 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Original]]></category>
      <category><![CDATA[HTML]]></category>
      <category><![CDATA[HTML libraries]]></category>
      <category><![CDATA[JavaScript]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2649</guid>
      <description><![CDATA[I have often lamented how many JavaScript developers don&#8217;t realize that a large percentage of HTML &#38; CSS authors are not comfortable writing JS, and struggle to use their libraries. To encourage libraries with HTML APIs, i.e. libraries that can be used without writing a line of JS, I made a website to list and promote them: markapp.io. [&#8230;]]]></description>
      <content:encoded><![CDATA[<p><a href="http://lea.verou.me/wp-content/uploads/2016/08/Screen-Shot-2016-08-26-at-17.09.24.png"><img class="alignright size-medium wp-image-2651" src="http://lea.verou.me/wp-content/uploads/2016/08/Screen-Shot-2016-08-26-at-17.09.24-300x234.png" alt="Screen Shot 2016-08-26 at 17.09.24" width="300" height="234" srcset="http://lea.verou.me/wp-content/uploads/2016/08/Screen-Shot-2016-08-26-at-17.09.24-300x234.png 300w, http://lea.verou.me/wp-content/uploads/2016/08/Screen-Shot-2016-08-26-at-17.09.24-768x599.png 768w, http://lea.verou.me/wp-content/uploads/2016/08/Screen-Shot-2016-08-26-at-17.09.24.png 1021w" sizes="(max-width: 300px) 100vw, 300px" /></a>I have often lamented how many JavaScript developers don&#8217;t realize that a large percentage of HTML &amp; CSS authors are not comfortable writing JS, and struggle to use their libraries.</p><p>To encourage libraries with HTML APIs, i.e. libraries that can be used without writing a line of JS, I made a website to list and promote them: <a href="http://markapp.io">markapp.io</a>. The list is currently quite short, so I’m counting on you to <a href="https://github.com/LeaVerou/markapp">expand it</a>. Seen any libraries with good HTML APIs? Add them!</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/7ilYG6MJKUI" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2016/08/markapp-a-list-of-html-libraries/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2016/08/markapp-a-list-of-html-libraries/</feedburner:origLink>
    </item>
    <item>
      <title>Introducing Multirange: A tiny polyfill for HTML5.1 two-handle sliders</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/CgEmFMNXTjI/</link>
      <comments>http://lea.verou.me/2016/05/introducing-multirange-a-tiny-polyfill-for-html5-two-handle-sliders/#comments</comments>
      <pubDate>Tue, 31 May 2016 22:13:00 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Apps & scripts]]></category>
      <category><![CDATA[Original]]></category>
      <category><![CDATA[HTML5]]></category>
      <category><![CDATA[HTML5.1]]></category>
      <category><![CDATA[sliders]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2621</guid>
      <description><![CDATA[As part of my preparation for my talk at CSSDay HTML Special, I was perusing the most recent HTML specs (WHATWG Living Standard, W3C HTML 5.1) to see what undiscovered gems lay there. It turns out that HTML sliders have a lot of cool features specced that aren&#8217;t very well implemented: Ticks that snap via the [&#8230;]]]></description>
      <content:encoded><![CDATA[<p><a href="http://lea.verou.me/wp-content/uploads/2016/05/multirange.png"><img class="size-medium wp-image-2624 alignleft" src="http://lea.verou.me/wp-content/uploads/2016/05/multirange-300x206.png" alt="multirange" width="300" height="206" srcset="http://lea.verou.me/wp-content/uploads/2016/05/multirange-300x206.png 300w, http://lea.verou.me/wp-content/uploads/2016/05/multirange-768x528.png 768w, http://lea.verou.me/wp-content/uploads/2016/05/multirange-1024x704.png 1024w, http://lea.verou.me/wp-content/uploads/2016/05/multirange.png 1165w" sizes="(max-width: 300px) 100vw, 300px" /></a>As part of my preparation for <a href="http://cssday.nl/2016/programme#lea-verou">my talk at CSSDay HTML Special</a>, I was perusing the most recent HTML specs (<a href="https://html.spec.whatwg.org/multipage/">WHATWG Living Standard</a>, <a href="https://www.w3.org/TR/html51/">W3C HTML 5.1</a>) to see what undiscovered gems lay there. It turns out that HTML sliders have a lot of cool features specced that aren&#8217;t very well implemented:</p><ul><li>Ticks that snap via the <code>list</code> attribute and the <code>&lt;datalist&gt;</code> element. This is fairly decently implemented, except labelled ticks, which is not supported anywhere.</li><li>Vertical sliders when height &gt; width, implemented nowhere (instead, browsers employ proprietary ways for making sliders vertical: An <code>orient=vertical</code> attribute in Gecko, <code>-webkit-appearance: slider-vertical;</code> in WebKit/Blink and <code>writing-mode: bt-lr;</code> in IE/Edge). Good ol&#8217; rotate transforms work too, but have the usual problems, such as layout not being affected by the transform.</li><li>Two-handle sliders for ranges, via the <code>multiple</code> attribute.</li></ul><p>I made a quick <a href="http://dabblet.com/gist/0b79583e6e9c4e5e52aec5d682ac71d2">testcase</a> for all three, and to my disappointment (but not to my surprise), support was extremely poor. I was most excited about the last one, since I&#8217;ve been wanting range sliders in HTML for a long time. Sadly, there are no implementations. But hey, what if I could create a polyfill by cleverly overlaying two sliders? Would it be possible? I started <a href="http://jsbin.com/risiki/edit?html,css,js,output">experimenting in JSBin</a> last night, just for the lolz, then soon realized this could actually work and <a href="https://github.com/leaverou/multirange">started a GitHub repo</a>. Since CSS variables are now supported almost everywhere, I&#8217;ve had a lot of fun using them. Sure, I could get broader support without them, but the code is much simpler, more elegant and customizable now. I also originally started with a <a href="http://blissfuljs.com">Bliss</a> dependency, but realized it wasn&#8217;t worth it for such a tiny script.</p><p>So, enjoy, and contribute!</p><p><a class="view-demo" href="http://leaverou.github.io/multirange/">Multirange</a></p><img src="http://feeds.feedburner.com/~r/leaverou/~4/CgEmFMNXTjI" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2016/05/introducing-multirange-a-tiny-polyfill-for-html5-two-handle-sliders/feed/</wfw:commentRss>
      <slash:comments>21</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2016/05/introducing-multirange-a-tiny-polyfill-for-html5-two-handle-sliders/</feedburner:origLink>
    </item>
    <item>
      <title>My positive experience as a woman in tech</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/h62mIYhVziE/</link>
      <comments>http://lea.verou.me/2015/12/my-positive-experience-as-a-woman-in-tech/#comments</comments>
      <pubDate>Thu, 17 Dec 2015 02:55:28 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Personal]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2590</guid>
      <description><![CDATA[Women speaking up about the sexism they have experienced in tech is great for raising awareness about the issues. However, when no positive stories get out, the overall picture painted is bleak, which could scare even more women away. Lucky for me, I fell in love with programming a decade before I even heard there is a [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>Women speaking up about the sexism they have experienced in tech is great for raising awareness about the issues. However, <strong>when no positive stories get out, the overall picture painted is bleak, which could scare even more women away</strong>.</p><p>Lucky for me, <a href="http://lea.verou.me/2012/05/how-i-got-into-web-development-the-long-version/">I fell in love with programming a decade before I even heard there is a sexism problem in tech</a>. Had I read about it before, I might have decided to go for some other profession. Who wants to be fighting an uphill battle all her life?</p><p>Thankfully, my experience has been quite different. Being in this industry has brought me nothing but happiness. Yes, there are several women who have had terrible experiences, and I’m in no way discounting them. They may even be the majority, though I am not aware of any statistics. However, there is also the other side. Those of us who have had incredibly positive experiences, and have always been treated with nothing but respect. That side’s stories need to be heard too, not silenced out of fear that we will become complacent and stop trying for more equality. Stories like mine should become the norm, not the exception.</p><p>I’ve had a number of different roles in tech over the course of my life. I’ve been a student, a speaker &amp; author, I’ve worked at <a href="http://w3.org">W3C</a>, I’ve started &amp; maintain several successful open source projects and I’m <a href="http://lea.verou.me/2014/02/im-going-to-mit/">currently dabbling in Computer Science research</a>. In none of these roles did I ever feel I was unfairly treated due to my gender. That is not because I’m oblivious to sexism. I tend to be very sensitive to seeing it, and I often notice even the smallest acts of sexism (“death by a thousand paper cuts”). I see a lot of sexism in society overall. However, inside this industry, my gender never seemed to matter much, except perhaps in positive ways.</p><p>On <a href="http://github.com/leaverou">my open source repos</a>, I have several contributors, the overwhelming majority of which, is male. I’ve never felt less respected due to my gender. I’ve never felt that my work was taken less seriously than male OSS developers. I’ve never felt my contributors would not listen to me. I’ve never felt my work was unfairly scrutinized. Even when I didn’t know something, or introduced a horrible bug, I’ve never been insulted or berated. The community has been nothing but friendly, helpful and respectful. If anything, I’ve sometimes wondered if my gender is the reason I hardly ever get any shit!</p><p>On stage, I’ve never gotten any negative reactions. My talks always get excellent reviews, which have nothing to do with me being female. There is sometimes the odd complimentary tweet about my looks, but that’s not only exceedingly rare, but also always combined with a compliment about the actual talk content. My gender only affected my internal motivation: I often felt I <strong>had</strong> to be good, otherwise I would be painting all female tech speakers in a negative light. But other people are not at fault for my own stereotype threat.</p><p>My book, <a href="http://www.amazon.com/CSS-Secrets-Solutions-Everyday-Problems/dp/1449372635/ref=cm_cr_pr_product_top?ie=UTF8">CSS Secrets</a>, has been as successful as an advanced CSS book could possibly aspire to be and got to an average of 5 stars on Amazon only a few months after its release. It’s steadily the 5th bestseller on CSS and was No 1 for a while shortly after publication. My gender did not seem to negatively affect any of that, even though there’s a picture of me in the french flap so there are no doubts about me being female (as if the name Lea wasn’t enough of a hint).</p><p>As a student, I’ve never felt unfairly treated due to my gender by any of my professors, even the ones in Greece, a country that is not particularly famous for its gender equal society, to put it mildly.</p><p>As a new researcher, I have no experience with publishing papers yet, so I cannot share any experiences on that. However, I’ve been treated with nothing but respect by both <a href="https://en.wikipedia.org/wiki/David_Karger">my advisor</a> and colleagues. My opinion is always heard and valued and even when people don’t agree, I can debate it as long and as intensely as I want, without being seen as aggressive or “bossy”.</p><p>I’ve worked at <a href="http://w3.org">W3C</a> and still participate as an Invited Expert in the CSS Working Group. In neither of these roles did my gender seem to matter in any way. I’ve always felt that my expertise and skillset were valued and my opinions heard. In fact, the most well-respected member of the CSS WG, is the only other woman in it: <a href="http://fantasai.inkedblade.net/">fantasai</a>.</p><p>Lastly, In all my years as a working professional, I’ve always negotiated any kind of remuneration, often hard. I’ve never lost an opportunity because of it, or been treated with negativity afterwards.</p><p>On the flip side, sexism today is rarely overt. Given that hardly anybody over ten will flat out admit they think women are inferior (even to themselves), it’s often hard to tell when a certain behavior stems from sexist beliefs. If someone is a douchebag to you, are they doing it because you’re a woman, or because they’re douchebags? If someone is criticizing your work, are they doing it because they genuinely found something to criticize or because they’re negatively predisposed due to your gender? It’s impossible to know, especially since <strong>they don’t know either</strong>! If you confront them on their sexism, they will deny all of it, and truly believe it. <strong>It takes a lot of introspection to see one’s internalized stereotypes.</strong> Therefore, a lot of the time, you cannot be sure if you have experienced sexist behavior, and there is no way to find out for sure, since the perpetrator doesn’t know either. There are many false positives and false negatives there.</p><p>Perhaps I don’t feel I have experienced much sexism because I prefer to err on the side of false negatives. Paraphrasing <a href="https://en.wikipedia.org/wiki/Blackstone%27s_formulation">Blackstone</a>, I would rather not call out sexist behavior ten times, than wrongly accuse someone of it once. It might also have to do with my personality: I’m generally confident and can be very assertive. When somebody is being a jerk to me, I will not curl in a ball and question my life choices, I will reply to them in the same tone. However, those two alone cannot make the difference between a pit rampant with sexism and an egalitarian paradise. I think a lot of it is that we have genuinely made progress, and we should celebrate it with more women coming out with their positive experiences (it cannot just be me, right?).</p><p>Ironically, one of the very few times I have experienced any sexism in the industry was when a dude was trying to be nice to me. I was in a speaker room at a conference in Las Vegas, frantically working on my slides, not participating in any of the conversations around me. At some point, one of the guys said “fuck” in a conversation, then turned and apologized to me. Irritated about the sudden interruption, I lifted my head and looked around. <strong>I noticed for the first time that day that I was the only woman in the room.</strong><strong>His effort to be courteous made me feel that I was different, the odd one out</strong>, the one we must be careful around and treat like a fragile flower. To this day, I regret being too startled to reply <em>“Eh, I don’t give a fuck”</em>.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/h62mIYhVziE" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/12/my-positive-experience-as-a-woman-in-tech/feed/</wfw:commentRss>
      <slash:comments>516</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/12/my-positive-experience-as-a-woman-in-tech/</feedburner:origLink>
    </item>
    <item>
      <title>Introducing Bliss: A 3KB library for happier Vanilla JS</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/3tzwMH7qGnQ/</link>
      <comments>http://lea.verou.me/2015/12/introducing-bliss-a-3kb-library-for-happier-vanilla-js/#comments</comments>
      <pubDate>Fri, 04 Dec 2015 23:00:40 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Apps & scripts]]></category>
      <category><![CDATA[Original]]></category>
      <category><![CDATA[Personal]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2570</guid>
      <description><![CDATA[Anyone who follows this blog, my twitter, or my work probably is aware that I’m not a huge fan of big libraries. I think wrapper objects are messy, and big libraries are overkill for smaller projects. On large projects, one uses frameworks like React or Angular anyway, not libraries. Anyone who writes Vanilla JS on a daily [&#8230;]]]></description>
      <content:encoded><![CDATA[<p><a href="http://blissfuljs.com"><img class="alignleft wp-image-2574 size-medium" src="http://lea.verou.me/wp-content/uploads/2015/12/Screen-Shot-2015-12-04-at-16.59.39-300x127.png" alt="Screen Shot 2015-12-04 at 16.59.39" width="300" height="127" srcset="http://lea.verou.me/wp-content/uploads/2015/12/Screen-Shot-2015-12-04-at-16.59.39-300x127.png 300w, http://lea.verou.me/wp-content/uploads/2015/12/Screen-Shot-2015-12-04-at-16.59.39-1024x433.png 1024w, http://lea.verou.me/wp-content/uploads/2015/12/Screen-Shot-2015-12-04-at-16.59.39.png 1233w" sizes="(max-width: 300px) 100vw, 300px" /></a>Anyone who follows this blog, my twitter, or my work probably is aware that <a href="http://lea.verou.me/2015/04/jquery-considered-harmful/">I’m not a huge fan of big libraries</a>. I think wrapper objects are messy, and big libraries are overkill for smaller projects. On large projects, one uses frameworks like React or Angular anyway, not libraries.</p><p>Anyone who writes <a href="http://vanilla-js.com/" target="_blank">Vanilla JS</a> on a daily basis probably is aware that it can sometimes be, ahem, somewhat unpleasant to work with. Sure, the situation is orders of magnitude better than it was when I started. Back then, IE6 was the dominant browser and you needed a helper function to even add event listeners to an element (remember element.attachEvent?) or to get elements by a class!</p><p><a href="http://lea.verou.me/wp-content/uploads/2015/12/jasset-datepicker.png"><img class="alignright wp-image-2571" title="Ah, the memories!" src="http://lea.verou.me/wp-content/uploads/2015/12/jasset-datepicker-300x211.png" alt="jasset-datepicker" width="251" height="176" srcset="http://lea.verou.me/wp-content/uploads/2015/12/jasset-datepicker-300x211.png 300w, http://lea.verou.me/wp-content/uploads/2015/12/jasset-datepicker.png 968w" sizes="(max-width: 251px) 100vw, 251px" /></a></p><p><strong>Fun fact:</strong> I learned JavaScript back then by writing my own library, called <em>jAsset</em>. I had not heard of jQuery when I started it in 2007, so I had even coded my own selector engine! (Anyone remember <em>slickspeed</em>?) jAssset had plenty of nice helper functions, its own UI library and a cool logo. I had even started to make a website for its UI components, seen on the right.</p><p><a href="https://shipitsquirrel.github.io"><img class="alignleft" src="http://shipitsquirrel.github.io/images/ship%20it%20squirrel.png" alt="" width="300" height="370" /></a>Sadly, <em>jAsset</em> died the sad inevitable death of all unreleased projects: Without external feedback, I had nobody to hold me back from adding to its API every time I personally needed a helper function. And adding, and adding, and adding… Until it became 5000+ loc long and its benefit of being lightweight or comprehensible had completely vanished. It collapsed under its own weight before it even saw the light of day. I abandoned it and went through a few years of using jQuery as my preferred helper library. Eventually, my <a href="http://lea.verou.me/2015/04/jquery-considered-harmful/">distaste for wrapper objects</a>, the constantly improving browser support for new APIs that made Vanilla JS more palatable, and the decline of overly conspicuous browser bugs led me to give it up.</p><p>It was refreshing, and educational, but soon I came to realize that while Vanilla JS is orders of magnitude better than it was when I started, certain APIs are still quite unwieldy, which can be annoying if you use them often. For example, the Vanilla JS for creating an element, with other elements inside it, events and inline styles is so commonly needed, but also so verbose and <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">WET</a>, it can make one suicidal.</p><p>However, Vanilla JS does not mean “use no abstractions”. Programming is all about abstractions! The Vanilla JS movement, is about favoring speed, smaller abstractions and understanding of the Web Platform, over big libraries that we treat as a black box. It’s about using libraries to save time, not to skip learning.</p><p>So, I used my own tiny helpers, on every project. They were small and easy to understand, instead of several KB of code aiming to fix browser bugs I will likely never encounter and let me create complex nested DOM structures with a single JSON-like object. Over time, their API solidified and improved. On larger projects it was a separate file which I had tentatively codenamed <em>Utopia</em> (due to the lack of browser bug fixes and optimistic use of modern APIs). On smaller ones just a few helper methods (I could not live without at least my tiny 2 sloc $() and $$() helpers!). Here is a sample from my open source repos:</p><ul><li><a href="https://github.com/LeaVerou/dabblet/blob/master/code/utopia.js">dabblet.com/utopia.js</a></li><li><a href="https://github.com/LeaVerou/regexplained/blob/gh-pages/utopia.js">regexplained/utopia.js</a></li><li><a href="https://github.com/LeaVerou/dpi/blob/gh-pages/utopia.js">dpi.lv/utopia.js</a></li><li><a href="https://github.com/LeaVerou/css3test/blob/gh-pages/utopia.js">css3test.com/utopia.js</a></li><li><a href="https://github.com/LeaVerou/awesomplete/blob/gh-pages/awesomplete.js#L296-L351">awesomplete.js</a></li><li>$() and/or $$() helpers in:
                 <ul><li><a href="https://github.com/LeaVerou/prefixfree/blob/gh-pages/prefixfree.js#L167-L169">prefixfree</a></li><li><a href="https://github.com/LeaVerou/csss/blob/gh-pages/slideshow.js#L10-L11">CSSS</a></li><li><a href="https://github.com/LeaVerou/animatable/blob/gh-pages/index.js#L1-L2">animatable</a></li><li><a href="https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/contrast-ratio.js#L1-L7">contrast-ratio</a></li><li><a href="https://github.com/LeaVerou/cubic-bezier/blob/gh-pages/environment.js#L27-L28">cubic-bezier.com</a></li><li><a href="https://github.com/LeaVerou/whathecolor/blob/gh-pages/whathecolor.js#L1-L7">whathecolor</a></li><li><a href="https://github.com/LeaVerou/corner-shape/blob/gh-pages/corner-shape.js#L1-L2">corner-shape</a></li><li><a href="https://github.com/LeaVerou/css-colors/blob/gh-pages/colors.js#L1-L2">css-colors</a></li></ul></li></ul><p>Notice any recurring themes there? <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>I never mentioned <em>Utopia.js</em> anywhere, besides silently including it in my projects, so it went largely unnoticed. Sometimes people would look at it, ask me to release it, I’d promise them I would and then nothing. A few years ago, someone noticed it, liked it and <a href="http://davidhiggins.me/utopia/">documented it</a> a bit (site is down now it seems). However, it was largely my little secret, hidden in public view.</p><p>For the past half year, I’ve been working hard on my research project at MIT. It’s pretty awesome and is aimed at helping people who know HTML/ CSS but <strong>not</strong> JS, achieve more with Web technologies (and that’s all I can say for now). It’s also written in JS, so I used <em>Utopia</em> as a helper library, naturally. <em>Utopia</em> evolved even more with this project, got renamed to <em>Bliss</em> and got chainability via <a href="http://lea.verou.me/2015/04/idea-extending-native-dom-prototypes-without-collisions/">my idea about extending DOM prototypes without collisions</a> (can be disabled and the property name is customizable).</p><p>All this worked fine while I was the only person working on the project. Thankfully, I might get some help soon, and it might be rather inexperienced (the academia equivalent of interns). Help is very welcome, but it did raise the question: How will these people, who likely only know jQuery, work on the project? [1]</p><p>The answer was that the time has come to polish, document and release <a href="http://blissfuljs.com">Bliss</a> to the world. My plan was to spend a weekend documenting it, but it ended up being a little over a week on and off, when procrastinating from other tasks I had to do. However, I’m very proud of the resulting docs, so much that I gifted myself <a href="http://blissfuljs.com">a domain</a> for it. They are fairly extensive (though some functions still need work) and has two things I always missed in other API docs:</p><ul><li>Recommendations about what Vanilla JS to use instead when appropriate, instead of guiding people into using library methods even when Vanilla JS would have been perfectly sufficient.</li><li>A “Show Implementation” button showing the implementation, so you can both learn, and judge whether it’s needed or not, instead of assuming that you should use it over Vanilla JS because it has magic pixie dust. This way, the docs also serve as a source viewer!</li></ul><p>So, enjoy <a href="http://blissfuljs.com">Bliss</a>. The helper library for people who don’t like helper libraries. <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> In a way, it feels that a journey of 8 years, finally ends today. I hope the result makes you blissful too.</p><p><a class="view-demo" href="http://blissfuljs.com" target="_blank">blissfuljs.com</a></p><p>Oh, and don’t forget to follow <a href="http://twitter.com/blissfuljs">@blissfuljs</a> on twitter!</p><p style="font-size: smaller;">[1]: Academia is often a little behind tech-wise, so <strong>everyone</strong> uses jQuery here — hardly any exceptions. Even though browser support doesn’t usually even matter to research projects!</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/3tzwMH7qGnQ" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/12/introducing-bliss-a-3kb-library-for-happier-vanilla-js/feed/</wfw:commentRss>
      <slash:comments>35</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/12/introducing-bliss-a-3kb-library-for-happier-vanilla-js/</feedburner:origLink>
    </item>
    <item>
      <title>Copying object properties, the robust way</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/wpPgdrWLJGw/</link>
      <comments>http://lea.verou.me/2015/08/copying-properties-the-robust-way/#comments</comments>
      <pubDate>Sun, 16 Aug 2015 15:44:32 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Tips]]></category>
      <category><![CDATA[JavaScript]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2558</guid>
      <description><![CDATA[If, like me, you try to avoid using heavy libraries when not needed, you must have definitely written a helper to copy properties from one object to another at some point. It’s needed so often that it’s just silly to write the same loops over and over again. These days, most of my time is [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>If, like me, you try to <a href="http://lea.verou.me/2015/04/jquery-considered-harmful/" target="_blank">avoid using heavy libraries when not needed</a>, you must have definitely written a helper to copy properties from one object to another at some point. It’s needed so often that it’s just silly to write the same loops over and over again.</p><p>These days, most of my time is spent working on <a href="http://lea.verou.me/2014/02/im-going-to-mit/" target="_blank">my research project at MIT</a>, which I will hopefully reveal later this year. In that, I’m using a lightweight homegrown helper library, which I might release separately at some point as I think it has potential in its own right, for a number of reasons.</p><p>Of course, it needed to have a simple <code>extend()</code> method as well, to copy properties from one object to another. Let’s assume for the purposes of this article that we’re talking about shallow copying, that overwrites are allowed, and let’s omit <code>hasOwnProperty()</code> checks to make code easier to read.</p><p>It’s a simple task, right? Our first attempt might look like this:</p><pre><code class="language-javascript">$.extend = function (to, from) {
             for (var property in from) {
             to[property] = from[property];
             }

             return to;
             }</code></pre><p>This works fine, until you try it on objects with accessors or other types of properties defined via <code>Object.defineProperty()</code> or <code>get</code>/<code>set</code> keywords. What do you do then? Our next iteration could look like this:</p><pre><code class="language-javascript">$.extend = function (to, from) {
             for (var property in from) {
             Object.defineProperty(to, property, Object.getOwnPropertyDescriptor(from, property));
             }

             return to;
             }</code></pre><p>This works much better, until it fails, and it can fail pretty epically. Try this:</p><pre><code class="language-javascript">$.extend(document.body.style, {
             backgroundColor: "red"
             });</code></pre><p>Both in Chrome and Firefox, the results are super weird. Even though reading <code class="language-javascript">document.body.style.backgroundColor</code> will return <code class="language-javascript">"red"</code>, no style will have actually been applied. In Firefox it even destroyed the native setter entirely and any future attempts to set <code class="language-javascript">document.body.style.backgroundColor</code> in the console did absolutely nothing.</p><p>In contrast, the previous naïve approach worked fine for this. It’s clear that we need to somehow combine the two approaches, using Object.defineProperty() only when actually needed. But when is it actually not needed?</p><p>One obvious case is if the descriptor is <code>undefined</code> (such as with some native properties). Also, in simple properties, such as those in our object literal, the descriptor will be of the form <code class="language-javascript">{value: somevalue, writable: true, enumerable: true, configurable: true}</code>. So, the next obvious step would be:</p><pre><code class="language-javascript">$.extend = function (to, from) {
             var descriptor = Object.getOwnPropertyDescriptor(from, property);

             if (descriptor && (!descriptor.writable || !descriptor.configurable || !descriptor.enumerable || descriptor.get || descriptor.set)) {
             Object.defineProperty(to, property, descriptor);
             }
             else {
             to[property] = from[property];
             }
             }</code></pre><p>This works perfectly, but is a little clumsy. I’ve currently left it at that, but any suggestions for making it more elegant are welcome <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>FWIW, I looked at <a href="http://james.padolsey.com/jquery/#v=git&#038;fn=jQuery.extend" target="_blank">jQuery’s implementation of jQuery.extend()</a> after this, and it seems it doesn’t even handle accessors at all, unless I missed something. Time for a pull request, perhaps…</p><p><strong>Edit:</strong> As MaxArt pointed out in the comments, there is a similar native method in ES6, <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"><code>Object.assign()</code></a>. However, it does not deal with copying accessors, so does not deal with this problem either.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/wpPgdrWLJGw" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/08/copying-properties-the-robust-way/feed/</wfw:commentRss>
      <slash:comments>19</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/08/copying-properties-the-robust-way/</feedburner:origLink>
    </item>
    <item>
      <title>On the blindness of blind reviews</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/GiQVt6wm-YU/</link>
      <comments>http://lea.verou.me/2015/08/on-the-blindness-of-blind-reviews/#comments</comments>
      <pubDate>Thu, 13 Aug 2015 17:58:49 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Rants]]></category>
      <category><![CDATA[Thoughts]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2554</guid>
      <description><![CDATA[Over the last couple of years, blind reviews have been popularized as the ultimate method for fair talk selection in industry conferences. While I don’t really submit proposals myself, I have served several times on the other side of the process, doing speaker selection in conference committees, and the more data points I collect, the [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>Over the last couple of years, blind reviews have been popularized as the ultimate method for fair talk selection in industry conferences. While I don’t really submit proposals myself, I have served several times on the other side of the process, doing speaker selection in conference committees, and the more data points I collect, the more convinced I become that the blind selection process is fundamentally flawed.</p><p>Blind reviews come from the world of academia. However, in academic conferences, you do not judge a talk by a 1-2 paragraph abstract, but by a 10+ page paper, so there’s way more to judge by. In addition, in academia the content of the research matters infinitely more than the quality of a talk. In industry conferences, selection committees in blind reviews have both <strong>way less data to use</strong>, and a <strong>much harder task</strong>, as they need to balance several factors (content, speaker skill, talk quality etc). It’s no surprise that the results end up being even more of a gamble.</p><p><strong>Blind reviews result in conservative talk selection.</strong> More often than not, I remember me and my fellow committee members saying “Damn, this talk could be great with the right presenter, but that’s rare” and giving it a poor or average score. <strong>Few topics can make good talks regardless of the presenters.</strong> Therefore, when there is little information on the speaker in the initial selection round, talk selection ends up being conservative, rejecting more challenging topics that need a skilled speaker to shine and sticking to safer choices.</p><p>One of my most successful talks ever was “The humble border-radius” which was shortlisted for a .net award for Conference Talk of The Year 2014. <strong>It would never have passed any blind review.</strong> There is no committee in their right mind that would have accepted a 45 minute talk about …border-radius. The conferences I presented it at invited me as a speaker, carte blanche, and trusted me to present on whatever I felt like. Judging by the reviews, they were not disappointed.</p><p>In addition, all too many times I’ve seen great speakers get poor scores in blind reviews, not because their talks were not good, but because <strong>writing good abstracts is an entirely separate skill</strong>. Blind reviews remove anything that could cause bias, but they do so by striping all personality away from a proposal. In addition, a good abstract for a blind review is not necessarily a good abstract in general. For example, blind reviews penalize more mysterious/teasy abstracts and tend to be skewed towards overly detailed ones, since it’s the only data the committee gets for these talks (bonus points here for CfS that have a separate field for more details to conf organizers).</p><p><strong>“But what about newcomers to the conference circuit? What about bias elimination?”</strong> one might ask. Both very valid concerns. I’m not saying any kind of anonymization is a bad idea. I’m saying that in their present form in industry conferences, blind reviews are flawed. For example, an initial round of blind reviews to pick good talks, without rejecting any at that stage, would probably solve these issues, without suffering from the flaws mentioned above.</p><p><strong>Disclaimer:</strong> I do recognize that most people in these committees are doing their best to select fairly, and putting many hours of (usually volunteer) work in it. I’m not criticizing them, I’m criticizing the process. And yes, I recognize that it’s a process that has come out of very good intentions (eliminating bias). However, <strong>good intentions are not a guarantee for infallibility</strong>.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/GiQVt6wm-YU" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/08/on-the-blindness-of-blind-reviews/feed/</wfw:commentRss>
      <slash:comments>8</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/08/on-the-blindness-of-blind-reviews/</feedburner:origLink>
    </item>
    <item>
      <title>Stretchy: Form element autosizing, the way it should be</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/wOpj9Ad7aA0/</link>
      <comments>http://lea.verou.me/2015/07/stretchy-form-element-autosizing-the-way-it-should-be/#comments</comments>
      <pubDate>Sun, 26 Jul 2015 11:19:36 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Apps & scripts]]></category>
      <category><![CDATA[Original]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2544</guid>
      <description><![CDATA[As you might be aware, these days a good chunk of my time is spent working on research, at MIT. Although it’s still too early to talk about my research project, I can say that it’s related to the Web and it will be open source, both of which are pretty awesome (getting paid to [&#8230;]]]></description>
      <content:encoded><![CDATA[<p><a href="http://lea.verou.me/wp-content/uploads/2015/07/Screen-Shot-2015-07-25-at-18.40.13-.png"><img class="alignright size-medium wp-image-2545" src="http://lea.verou.me/wp-content/uploads/2015/07/Screen-Shot-2015-07-25-at-18.40.13--300x204.png" alt="Screen Shot 2015-07-25 at 18.40.13" width="300" height="204" srcset="http://lea.verou.me/wp-content/uploads/2015/07/Screen-Shot-2015-07-25-at-18.40.13--300x204.png 300w, http://lea.verou.me/wp-content/uploads/2015/07/Screen-Shot-2015-07-25-at-18.40.13--1024x697.png 1024w, http://lea.verou.me/wp-content/uploads/2015/07/Screen-Shot-2015-07-25-at-18.40.13-.png 1135w" sizes="(max-width: 300px) 100vw, 300px" /></a>As you might be aware, <a href="http://lea.verou.me/2014/02/im-going-to-mit/">these days a good chunk of my time is spent working on research, at MIT</a>. Although it’s still too early to talk about my research project, I can say that it’s related to the Web and it will be open source, both of which are pretty awesome (getting paid to work on cool open source stuff is the dream, right?).</p><p>The one thing I <em>can</em> mention about my project is that it involves a lot of editing of Web content. And since contentEditable is a mess, as you all know, I decided to use form controls styled like the content being edited. This meant that I needed a good script for form control autosizing, one that worked on multiple types of form controls (inputs, textareas, even select menus). In addition, I needed the script to smoothly work for newly added controls, without me having to couple the rest of my code with it and call API methods or fire custom events every time new controls were added anywhere. A quick look at the existing options quickly made it obvious that I had to write my own.</p><p>After writing it, I realized this could be released entirely separately as it was a standalone utility. So <a href="http://leaverou.github.io/stretchy/" target="_blank">Stretchy</a> was born <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> I made a quick page for it, fixed a few cross-browser bugs that needed fixing anyway, put it up on Github and here it is!</p><p><a class="view-demo" href="http://leaverou.github.io/stretchy" target="_blank">Enjoy!</a></p><p>PS: You can also use it as a bookmarklet, to autosize form controls on an existing page, if a form is bothering you with its poor usability. You will find it in the footer.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/wOpj9Ad7aA0" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/07/stretchy-form-element-autosizing-the-way-it-should-be/feed/</wfw:commentRss>
      <slash:comments>12</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/07/stretchy-form-element-autosizing-the-way-it-should-be/</feedburner:origLink>
    </item>
    <item>
      <title>Spot the unsubscribe (link)!</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/ftcO25NrxH0/</link>
      <comments>http://lea.verou.me/2015/07/spot-the-unsubscribe-link/#comments</comments>
      <pubDate>Tue, 14 Jul 2015 22:04:40 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Original]]></category>
      <category><![CDATA[Personal]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2541</guid>
      <description><![CDATA[After getting fed up with too many “promotional” emails and newsletters with incredibly obscure unsubscribe links, I decided to make this tumblr to point out such examples of digital douchebaggery. This annoying dark pattern is so widespread that Google even added a feature to Gmail for making those unsubscribe links obvious! Unsubscribe links are crucial [&#8230;]]]></description>
      <content:encoded><![CDATA[<blockquote><p><a href="http://lea.verou.me/wp-content/uploads/2015/07/Screen-Shot-2015-07-28-at-19.39.34-.png"><img class="alignright size-medium wp-image-2549" src="http://lea.verou.me/wp-content/uploads/2015/07/Screen-Shot-2015-07-28-at-19.39.34--300x136.png" alt="Screen Shot 2015-07-28 at 19.39.34" width="300" height="136" srcset="http://lea.verou.me/wp-content/uploads/2015/07/Screen-Shot-2015-07-28-at-19.39.34--300x136.png 300w, http://lea.verou.me/wp-content/uploads/2015/07/Screen-Shot-2015-07-28-at-19.39.34-.png 653w" sizes="(max-width: 300px) 100vw, 300px" /></a>After getting fed up with too many “promotional” emails and newsletters with incredibly obscure unsubscribe links, I decided to make this tumblr to point out such examples of digital douchebaggery. This annoying dark pattern is so widespread that <a href="http://www.businessinsider.com/google-obvious-unsubscribe-link-email-2014-2">Google even added a feature to Gmail for making those unsubscribe links obvious</a>!</p><p>Unsubscribe links are crucial to promotional emails. They are not just another menu item. They are not something that should be hidden in a blurb of tiny low contrast text. Unsubscribe links should be immediately obvious to anyone looking for them. You want people to be reading your email because they’re interested, not because they can‘t find the way out. Otherwise you are the digital equivalent of those annoying door-to-door salesmen who just won’t go away.</p><p>— From my introductory post on <a href="http://spottheunsubscribe.tumblr.com/post/124094024596/o-hai" target="_blank">Spot the unsubscribe!</a></p></blockquote><p>On the spur of the moment, after yet another email newsletter with a hard to find Unsubscribe link, I decided to quickly put together a <a href="http://spottheunsubscribe.tumblr.com/" target="_blank">tumblog</a> about this UX pet peeve of mine, called <a href="http://spottheunsubscribe.tumblr.com/" target="_blank">Spot the Unsubscribe!</a>. In less than an hour, it was ready and had a few posts as well <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>Hopefully if this bothers others as well, there will be <a href="http://spottheunsubscribe.tumblr.com/submit" target="_blank">submissions</a>. Otherwise, new posts will be rather infrequent.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/ftcO25NrxH0" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/07/spot-the-unsubscribe-link/feed/</wfw:commentRss>
      <slash:comments>4</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/07/spot-the-unsubscribe-link/</feedburner:origLink>
    </item>
    <item>
      <title>Conical gradients, today!</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/WlYR9vFr7Ns/</link>
      <comments>http://lea.verou.me/2015/06/conical-gradients-today/#comments</comments>
      <pubDate>Thu, 18 Jun 2015 20:57:31 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Apps & scripts]]></category>
      <category><![CDATA[CSS WG]]></category>
      <category><![CDATA[Original]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2534</guid>
      <description><![CDATA[It’s no secret that I like conical gradients. In as early as 2011, I wrote a draft for conical-gradient() in CSS, that Tab later said helped him when he added them in CSS Image Values Level 4 in 2012. However, almost three years later, no progress has been made in implementing them. Sure, the spec is [&#8230;]]]></description>
      <content:encoded><![CDATA[<p><a href="http://lea.verou.me/wp-content/uploads/2015/06/Screen-Shot-2015-06-18-at-16.26.40-.png"><img class="alignright size-full wp-image-2536" src="http://lea.verou.me/wp-content/uploads/2015/06/Screen-Shot-2015-06-18-at-16.26.40-.png" alt="Screen Shot 2015-06-18 at 16.26.40" width="312" height="312" srcset="http://lea.verou.me/wp-content/uploads/2015/06/Screen-Shot-2015-06-18-at-16.26.40-.png 312w, http://lea.verou.me/wp-content/uploads/2015/06/Screen-Shot-2015-06-18-at-16.26.40--150x150.png 150w, http://lea.verou.me/wp-content/uploads/2015/06/Screen-Shot-2015-06-18-at-16.26.40--300x300.png 300w" sizes="(max-width: 312px) 100vw, 312px" /></a>It’s no secret that I like conical gradients. In as early as 2011, I wrote <a href="http://lea.verou.me/specs/conical-gradient/">a draft for conical-gradient() in CSS</a>, that <a href="http://www.xanthir.com/blog/">Tab</a> later said helped him when he <a href="http://www.w3.org/TR/css4-images/#conic-gradients">added them in CSS Image Values Level 4</a> in 2012. However, almost <strong>three years later, no progress has been made</strong> in implementing them. Sure, the spec is still relatively incomplete, but that’s not the reason conical gradients have gotten no traction. <strong>Far more underspecified features have gotten experimental implementations in the past.</strong> The reason conical gradients are still unimplemented, is because very few developers know they exist, so browsers see no demand.</p><p>Another reason was that <a href="http://cairographics.org/">Cairo</a>, the graphics library used in Chrome and Firefox had no way of drawing a conical gradient. However, this changed a while ago, when <a href="http://libregraphicsworld.org/blog/entry/mesh-gradients-in-cairo-now-official">they supported mesh gradients</a>, of which conical gradients are a mere special case.</p><p>Recently, I was giving a talk on creating pie charts with CSS on a few conferences, and yet again, I was reminded of how useful conical gradients can be. While every CSS or SVG solution is several lines of code with varying levels of hackiness, conical gradients can give us a pie chart with a straightforward, DRY, one liner. For example, this is how to create a pie chart that shows 40% in gold and 60% in #f06:</p><pre><code>padding: 5em; /* size */
             background: conic-gradient(gold 40%, #f06 0);
             border-radius: 50%; /* make it round */</code></pre><p><a href="http://lea.verou.me/wp-content/uploads/2015/06/Screen-Shot-2015-06-18-at-16.23.57-.png"><img class="alignright size-full wp-image-2535" src="http://lea.verou.me/wp-content/uploads/2015/06/Screen-Shot-2015-06-18-at-16.23.57-.png" alt="Screen Shot 2015-06-18 at 16.23.57" width="320" height="306" srcset="http://lea.verou.me/wp-content/uploads/2015/06/Screen-Shot-2015-06-18-at-16.23.57-.png 320w, http://lea.verou.me/wp-content/uploads/2015/06/Screen-Shot-2015-06-18-at-16.23.57--300x287.png 300w" sizes="(max-width: 320px) 100vw, 320px" /></a><br />
             So, I decided to take matters in my own hands. I wrote <a href="http://leaverou.github.io/conic-gradient/">a polyfill</a>, which I also used in my talk to demonstrate how awesome conical gradients can be and what cool things they can do. Today, during my <a href="http://cssconf.com">CSSConf</a> talk, I released it publicly.</p><p>In addition, I mention to developers how important speaking up is for getting their favorite features implemented. <strong>Browsers prioritize which features to implement based on what developers ask for.</strong> It’s a pity that so few of us realize how much of a say we collectively have in this. This is more obvious with Microsoft and <a href="https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer">their Uservoice forum</a> where developers can vote on which features they want to see worked on, but pretty much every major browser works in a similar way. They monitor what developers request and what other browsers implement, and decide accordingly. The squeaky wheel will get the feature, so if you really want to see something implemented, <strong>speak up</strong>.</p><p>Since “speaking up” can be a bit vague (<em>“speak up where?”</em> I can hear you asking), I also filed bug reports with all major browsers, that you can also find <a href="http://leaverou.github.io/conic-gradient/#ask">in the polyfill page</a>, so that you can comment or vote on them. That doesn’t mean that speaking up on blogs or social media is not useful though: That’s why browsers have devrel teams. The more noise we collectively make about the features we want, the more likely it is to be heard. However, the odds are higher if we all channel our voices to the venues browser developers follow and our voice is stronger and louder if we concentrate it in the same places instead of having many separate voices all over the place.</p><p>Also, I’m using the term “noise” here a bit figuratively. While it’s valuable to make it clear that we are interested in a certain feature, it’s even more useful to say <strong>why</strong>. Providing use cases will not only grab browsers’ attention more, but it will also convince other developers as well.</p><p>So go ahead, play with conic gradients, and if you agree with me that they are fucking awesome and we need them natively on the Web, <strong>make noise</strong>.</p><p><a class="view-demo" href="http://leaverou.github.io/conic-gradient/">conic-gradient() polyfill</a></p><img src="http://feeds.feedburner.com/~r/leaverou/~4/WlYR9vFr7Ns" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/06/conical-gradients-today/feed/</wfw:commentRss>
      <slash:comments>33</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/06/conical-gradients-today/</feedburner:origLink>
    </item>
    <item>
      <title>Idea: Extending native DOM prototypes without collisions</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/Glq33Ehz7xc/</link>
      <comments>http://lea.verou.me/2015/04/idea-extending-native-dom-prototypes-without-collisions/#comments</comments>
      <pubDate>Mon, 20 Apr 2015 01:45:36 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Thoughts]]></category>
      <category><![CDATA[ES5]]></category>
      <category><![CDATA[JavaScript]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2517</guid>
      <description><![CDATA[As I pointed out in yesterday’s blog post, one of the reasons why I don’t like using jQuery is its wrapper objects. For jQuery, this was a wise decision: Back in 2006 when it was first developed, IE releases had a pretty icky memory leak bug that could be easily triggered when one added properties to [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>As I pointed out in <a href="http://lea.verou.me/2015/04/jquery-considered-harmful/">yesterday’s blog post</a>, one of the reasons why I don’t like using jQuery is its wrapper objects. For jQuery, this was a wise decision: Back in 2006 when it was first developed, IE releases had a pretty icky <strong>memory leak bug</strong> that could be easily triggered when one added properties to elements. Oh, and we also didn’t have access to element prototypes on IE back then, so we had to add these properties manually on every element. <a href="http://prototypejs.org/" target="_blank">Prototype.js</a> attempted to go that route and the result was such a mess that they decided to change their decision in Prototype 2.0 and go with wrapper objects too. There were even <a href="http://perfectionkills.com/whats-wrong-with-extending-the-dom/" target="_blank">long essays being written back then about how much of a monumentally bad idea it was to extend DOM elements</a>.</p><p>The first IE release that exposed element prototypes was IE8: We got access to Node.prototype, Element.prototype and a few more. Some were mutable, some were not. On IE9, we got the full bunch, including HTMLElement.prototype and its descendants, such as HTMLParagraphElement. The memory leak bugs were mitigated in IE8 and fixed in IE9. However, we still don’t extend native DOM elements, and for good reason: collisions are still a very real risk. No library wants to add a bunch of methods on elements, it’s just bad form. It’s like being invited in someone’s house and defecating all over the floor.</p><p><strong>But what if we could add methods to elements without the chance of collisions?</strong> (well, technically, by minimizing said chance). We could only add <strong>one property</strong> to Element.prototype, and then hang all our methods on that. E.g. if our library was called yolo and had two methods, foo() and bar(), calls to it would look like:</p><pre><code class="language-javascript">var element = document.querySelector(".someclass");
                      element.yolo.foo();
                      element.yolo.bar();
                      // or you can even chain, if you return the element in each of them!
                      element.yolo.foo().yolo.bar();</code></pre><p>Sure, it’s more awkward than wrapper objects, but the benefit of using native DOM elements is worth it if you ask me. Of course, YMMV.</p><p><strong>It’s basically exactly the same thing we do with globals</strong>: We all know that adding tons of global variables is bad practice, so every library adds one global and hangs everything off of that.</p><p>However, if we try to implement something like this in the naïve way, we will find that it’s kind of hard to reference the element used from our namespaced functions:</p><pre><code class="language-javascript">Element.prototype.yolo = {
                      foo: function () {
                      console.log(this);
                      },

bar: function () { /* ... */ }
};

someElement.yolo.foo(); // Object {foo: function, bar: function}</code></pre><p>What happened here? <code>this</code> inside any of these functions refers to the object that they are called on, not the element that object is hanging on! We need to be a bit more clever to get around this issue.</p><p>Keep in mind that <code>this</code> in the object inside <code>yolo</code><em>would</em> have access to the element we’re trying to hang these methods off of. But we’re not running any code there, so we’re not taking advantage of that. If only we could get a reference to that object’s context! However, running a function (e.g. <code>element.yolo().foo()</code>) would spoil our nice API.</p><p>Wait a second. We can run code on properties, via ES5 accessors! We could do something like this:</p><pre><code class="language-javascript">Object.defineProperty(Element.prototype, "yolo", {
get: function () {
return {
element: this,
foo: function() {
console.log(this.element);
},

bar: function() { /* ... */ }
}
},
configurable: true,
writeable: false
});

someElement.yolo.foo(); // It works! (Logs our actual element)</code></pre><p>This works, but there is a rather annoying issue here: We are <strong>generating this object and redefining our functions every single time this property is called.</strong> This is a rather bad idea for performance. Ideally, we want to <strong>generate this object once</strong>, and then return the generated object. We also don’t want every element to have its own completely separate instance of the functions we defined, we want to define these functions on a prototype, and use the wonderful JS inheritance for them, so that our library is also dynamically <strong>extensible</strong>. Luckily, there is a way to do all this too:</p><pre><code class="language-javascript">var Yolo = function(element) {
this.element = element;
};

Yolo.prototype = {
foo: function() {
console.log(this.element);
},

bar: function() { /* ... */ }
};

Object.defineProperty(Element.prototype, "yolo", {
get: function () {
Object.defineProperty(this, "yolo", {
value: new Yolo(this)
});

return this.yolo;
},
configurable: true,
writeable: false
});

someElement.yolo.foo(); // It works! (Logs our actual element)

// And it’s dynamically extensible too!
Yolo.prototype.baz = function(color) {
this.element.style.background = color;
};

someElement.yolo.baz("red") // Our element gets a red background</code></pre><p>Note that in the above, <strong>the getter is only executed once</strong>. After that, it overwrites the <code>yolo</code> property with a static value: An instance of the <code>Yolo</code> object. Since we’re using <code>Object.defineProperty()</code> we also don’t run into the issue of breaking enumeration (<code>for..in</code> loops), since these properties have <code>enumerable: false</code> by default.</p><p>There is still the wart that these methods need to use <code>this.element</code> instead of <code>this</code>. We could fix this by wrapping them:</p><pre><code class="language-javascript">for (let method in Yolo.prototype) {
Yolo.prototype[method] = function(){
var callback = Yolo.prototype[method];

Yolo.prototype[method] = function () {
var ret = callback.apply(this.element, arguments);

// Return the element, for chainability!
return ret === undefined? this.element : ret;
}
}
}</code></pre><p>However, now you can’t dynamically add methods to <code>Yolo.prototype</code> and have them automatically work like the native Yolo methods in <code>element.yolo</code>, so it kinda hurts extensibility (of course you could still add methods that use <code>this.element</code> and they would work).</p><p>Thoughts?</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/Glq33Ehz7xc" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/04/idea-extending-native-dom-prototypes-without-collisions/feed/</wfw:commentRss>
      <slash:comments>123</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/04/idea-extending-native-dom-prototypes-without-collisions/</feedburner:origLink>
    </item>
    <item>
      <title>jQuery considered harmful</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/bFr2SmPm-U8/</link>
      <comments>http://lea.verou.me/2015/04/jquery-considered-harmful/#comments</comments>
      <pubDate>Sun, 19 Apr 2015 06:51:00 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Rants]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2511</guid>
      <description><![CDATA[Heh, I always wanted to do one of those “X considered harmful” posts*. 😀 Before I start, let me say that I think jQuery has helped tremendously to move the Web forward. It gave developers power to do things that were previously unthinkable, and pushed the browser manufacturers to implement these things natively (without jQuery we probably wouldn’t [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>Heh, I always wanted to do one of those “X considered harmful” posts*. <img src="https://s.w.org/images/core/emoji/2/72x72/1f600.png" alt="😀" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>Before I start, let me say that I think <strong>jQuery has helped tremendously to move the Web forward</strong>. It gave developers power to do things that were previously unthinkable, and pushed the browser manufacturers to implement these things natively (without jQuery we probably wouldn’t have <code>document.querySelectorAll</code> now). And jQuery is still needed for those that cannot depend on the goodies we have today and have to support relics of the past like IE8 or worse.</p><p>However, as much as I feel for these poor souls, they are the minority. There are tons of developers that don’t need to support old browsers with a tiny market share. And let’s not forget those who aren’t even Web professionals: Students and researchers not only don’t need to support old browsers, but can often get by just supporting a single browser! You would expect that everyone in academia would be having tons of fun using all the modern goodies of the Open Web Platform, right? And yet, I haven’t seen jQuery being so prominent anywhere else as much as it is in academia. Why? Because this is what they know, and they really don’t have the time or interest to follow the news on the Open Web Platform. They don’t know what they need jQuery for, so they just use jQuery anyway. However, being able to do these things natively now is not the only reason I’d rather avoid jQuery.</p><h3>Yes, you probably don’t really need it…</h3><p>I’m certainly not the first one to point out how much of jQuery usage is about things you can do natively, so I won’t spend time repeating what others have written. Just visit the following and dive in:</p><ul><li><a href="http://youmightnotneedjquery.com/" target="_blank">You might not need jQuery</a></li><li><a href="http://blog.garstasio.com/you-dont-need-jquery/" target="_blank">You don’t need jQuery!</a></li><li><a href="http://www.sitepoint.com/do-you-really-need-jquery/" target="_blank">Do you really need jQuery?</a></li><li><a href="http://tutorialzine.com/2014/06/10-tips-for-writing-javascript-without-jquery/" target="_blank">10 tips for writing JavaScript without jQuery</a></li><li>…and lots more. Just try <a href="https://www.google.com/search?q=you+don%27t+need+jquery" target="_blank">googling “you don’t need jQuery”</a> and you will find plenty.</li></ul><p>I will also not spend time talking about <strong>file size</strong> or how much <strong>faster</strong> native methods are. These have been talked about before. Today, I want to make a point that is not frequently talked about…</p><h3>…but that’s not even the biggest reason not to use it today</h3><p>To avoid extending the native element prototypes, jQuery uses <strong>its own wrapper objects</strong>. Extending native objects in the past was a huge no-no, not only due to potential collisions, but also due to memory leaks in old IE. So, what is returned when you run <code>$("div")</code> is not a reference to an element, or a NodeList, it’s a jQuery object. This means that a jQuery object has completely different methods available to it than a reference to a DOM element, an array with elements or any type of NodeList. However, these native objects come up all the time in real code — as much as jQuery tries to abstract them away, you always have to deal with them, even if it’s just wrapping them in $(). For example, the context when a callback is called via jQuery’s .bind() method is a reference to an HTML element, not a jQuery collection. Not to mention that often you use code from multiple sources — some of them assume jQuery, some don’t. Therefore, you always end up with<strong> code that mixes jQuery objects, native elements and NodeLists</strong>. And this is where the hell begins.</p><p>If the developer has followed a naming convention for which variables contain jQuery objects (prepending the variable names with a dollar sign is the common one I believe) and which contain native elements, this is less of a problem (humans often end up forgetting to follow such conventions, but let’s assume a perfect world here). However, in most cases no such convention is followed, which results in the code being incredibly hard to understand by anyone unfamiliar with it. Every edit entails a lot of trial and error now (“Oh, it’s not a jQuery object, I have to wrap it with <code>$()</code>!” or “Oh, it’s not an element, I have to use [0] to get an element!”). To avoid such confusion, developers making edits often end up wrapping anything in <code>$()</code> defensively, so throughout the code, the same variable will have gone through <code>$()</code> multiple times. For the same reason, it also becomes especially hard to refactor jQuery out of said code. You are essentially <strong>locked in</strong>.</p><p>Even if naming conventions have been followed, you can’t just deal only with jQuery objects. You often need to use a native DOM method or call a function from a script that doesn’t depend on jQuery. Soon, conversions to and from jQuery objects are all over the place, cluttering your code.</p><p>In addition, when you add code to said codebase, you usually end up wrapping every element or nodelist reference with <code>$()</code> as well, because you don’t know what input you’re getting. So, not only you’re locked in, but <strong>all future code you write for the same codebase is also locked in</strong>.</p><p>Get any random script with a jQuery dependency that you didn’t write yourself and try to refactor it so that it doesn’t need jQuery. I dare you. You will see that your main issue will not be how to convert the functionality to use native APIs, but understanding what the hell is going on.</p><h3>A pragmatic path to JS nudity</h3><p>Sure, many libraries today require jQuery, and like I recently <a href="https://twitter.com/leaverou/status/588504217410609152" target="_blank">tweeted</a>, avoiding it entirely can feel like you’re some sort of digital vegan. However, this doesn’t mean you have to use it yourself. Libraries can always be replaced in the future, when good non-jQuery alternatives become available.</p><p>Also, most libraries are written in such a way that they do not require the $ variable to be aliased to jQuery. Just call <a href="https://api.jquery.com/jquery.noconflict/" target="_blank">jQuery.noConflict()</a> to reclaim the $ variable and be able to assign it to whatever you see fit. For example, I often define these helper functions, inspired from the <a href="https://developer.chrome.com/devtools/docs/commandline-api#selector" target="_blank">Command Line API</a>:</p><pre><code class="language-javascript">// Returns first element that matches CSS selector {expr}.
             // Querying can optionally be restricted to {container}’s descendants
             function $(expr, container) {
             return typeof expr === "string"? (container || document).querySelector(expr) : expr || null;
             }

             // Returns all elements that match CSS selector {expr} as an array.
             // Querying can optionally be restricted to {container}’s descendants
             function $$(expr, container) {
             return [].slice.call((container || document).querySelectorAll(expr));
             }</code></pre><p>In addition, I think that having to type <code>jQuery</code> instead of <code>$</code> every time you use it somehow makes you think twice about superfluously using it without really needing to, but I could be wrong <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>Also, if you actually <strong>like</strong> the jQuery API, but want to avoid the bloat, consider using <a href="http://zeptojs.com/" target="_blank">Zepto</a>.</p><p>* I thought it was brutally obvious that the title was tongue-in-cheek, but hey, it’s the Internet, and nothing is obvious. So there: The title is tongue-in-cheek and I’m very well aware of <a href="http://meyerweb.com/eric/comment/chech.html" target="_blank">Eric’s classic essay against such titles</a>.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/bFr2SmPm-U8" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/04/jquery-considered-harmful/feed/</wfw:commentRss>
      <slash:comments>699</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/04/jquery-considered-harmful/</feedburner:origLink>
    </item>
    <item>
      <title>Awesomplete: 2KB autocomplete with zero dependencies</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/bTcfEejwv0Q/</link>
      <comments>http://lea.verou.me/2015/02/awesomplete-2kb-autocomplete-with-zero-dependencies/#comments</comments>
      <pubDate>Thu, 19 Feb 2015 10:23:36 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Apps & scripts]]></category>
      <category><![CDATA[autocomplete]]></category>
      <category><![CDATA[awesomplete]]></category>
      <category><![CDATA[JavaScript]]></category>
      <category><![CDATA[typeahead]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2474</guid>
      <description><![CDATA[Sorry for the lack of posts for the past 7 (!) months, I’ve been super busy working on my book, which up to a certain point, I couldn’t even imagine finishing, but I’m finally there! I’ve basically tried to cram all the CSS wisdom I’ve accumulated over the years in it 😛 (which is partly why it [&#8230;]]]></description>
      <content:encoded><![CDATA[<p><a href="http://leaverou.github.io/awesomplete"><img class="alignright size-medium wp-image-2475" src="http://lea.verou.me/wp-content/uploads/2015/02/awesomplete-300x248.png" alt="awesomplete" width="300" height="248" srcset="http://lea.verou.me/wp-content/uploads/2015/02/awesomplete-300x248.png 300w, http://lea.verou.me/wp-content/uploads/2015/02/awesomplete.png 964w" sizes="(max-width: 300px) 100vw, 300px" /></a>Sorry for the lack of posts for the past 7 (!) months, I’ve been super busy working on <a href="http://shop.oreilly.com/product/0636920031123.do" target="_blank">my book</a>, which up to a certain point, I couldn’t even imagine finishing, but I’m finally there! I’ve basically tried to cram all the CSS wisdom I’ve accumulated over the years in it <img src="https://s.w.org/images/core/emoji/2/72x72/1f61b.png" alt="😛" class="wp-smiley" style="height: 1em; max-height: 1em;" /> (which is partly why it took so long, I kept remembering more things that just *had* to be in it. Its page count on the O’Reilly website had to be updated 3 times, from 250 to 300 to 350 and it looks like the final is gonna be closer to 400 pages) and it’s gonna be super awesome (<a href="http://shop.oreilly.com/product/0636920031123.do" target="_blank">preorder here!</a>) <img src="https://s.w.org/images/core/emoji/2/72x72/1f600.png" alt="😀" class="wp-smiley" style="height: 1em; max-height: 1em;" /> . I have been posting a few CSS tricks now and then on <a href="http://twitter.com/leaverou" target="_blank">my twitter account</a>, but haven’t found any time to write a proper blog post.</p><p>Anyhow, despite being super busy with MIT (which btw is amazing, challenging in a good way, and full of fantastic people. So glad to be here!) and the book, I recently needed an autocomplete widget for something. Surprisingly, I don’t think I ever had needed to choose one in the past. I’ve worked with apps that had it, but in those cases it was already there.</p><p>At first, I didn’t fret. Finally, a chance to use the <a href="http://blog.teamtreehouse.com/creating-autocomplete-dropdowns-datalist-element">HTML5 &lt;datalist&gt;</a>, so exciting! However, the more I played with it, the more my excitement was dying a slow death, taking my open web standards dreams and hopes along with it. Not only it’s incredibly inconsistent across browsers (e.g. Chrome matches only from the start, Firefox anywhere!), it’s also not hackable or customizable in any way. Not even if I got my hands dirty and used proprietary CSS, I still couldn’t do anything as simple as changing how the matching happens, styling the dropdown or highlighting the matching text!</p><p>So, with a heavy heart, I decided to use a script. However, when I looked into it, everything seemed super bloated for my needs and anything with half decent usability required jQuery, which results in even more bloat.</p><p>So, I did what every crazy person with a severe case of <a href="http://en.wikipedia.org/wiki/Not_invented_here" target="_blank">NIH Syndrome</a> would: <strong>I wrote one</strong>. It was super fun, and I don’t regret it, although now I’m even more pressed for time to meet my real deadlines. I wrote it primarily for myself, so even if nobody else uses it, ho hum, it was more fun than alternative ways to take a break. However, it’s my duty to put it on Github, in case someone else wants it and in case the community wants to take it into its loving, caring hands and pull request the hell out of it.</p><p>To be honest, I think it’s both pretty and pretty useful and even though it won’t suit complex needs out of the box, it’s pretty hackable/extensible. I even wrote quite a bit of <a href="http://leaverou.github.io/awesomplete/" target="_blank">documentation</a> at some point this week when I was too sleepy to work and not sufficiently sleepy to sleep — because apparently that’s what was missing from my life: even more technical writing.</p><p>I saved the best for last: It’s so lightweight you might end up chasing it around if there’s a lot of wind when you download it. It’s currently <strong>a little under 1.5KB</strong> minified &amp; gzipped (the website says 2KB because it will probably grow with commits and I don’t want to have to remember to update it all the time), with <strong>zero dependencies</strong>! <img src="https://s.w.org/images/core/emoji/2/72x72/1f600.png" alt="😀" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>And it’s even been verified to work in <strong>IE9 (sorta), IE10+, Chrome, Firefox, Safari 5+, Mobile Safari</strong>!</p><p><a class="view-demo" href="http://leaverou.github.io/awesomplete" target="_blank">’Nuff said. Get it now!</a></p><p style="font-size: 75%; margin: 2em 0;">PS: If you’re about to leave a comment on how it’s not called “<em>autocomplete</em>”, but “<em>typeahead</em>”, please go <a href="http://tirania.org/blog/archive/2011/Feb-17.html">choke on a bucket of cocks</a> instead. <img src="https://s.w.org/images/core/emoji/2/72x72/1f61b.png" alt="😛" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><img src="http://feeds.feedburner.com/~r/leaverou/~4/bTcfEejwv0Q" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2015/02/awesomplete-2kb-autocomplete-with-zero-dependencies/feed/</wfw:commentRss>
      <slash:comments>46</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2015/02/awesomplete-2kb-autocomplete-with-zero-dependencies/</feedburner:origLink>
    </item>
    <item>
      <title>An easy notation for grayscale colors</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/UJXuQOJLsb4/</link>
      <comments>http://lea.verou.me/2014/07/an-easy-notation-for-grayscale-colors/#comments</comments>
      <pubDate>Sun, 27 Jul 2014 18:44:46 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[CSS WG]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2436</guid>
      <description><![CDATA[These days, there is a lengthy discussion in the CSS WG about how to name a function that produces shades of gray (from white to black) with varying degrees of transparency, and we need your feedback about which name is easier to use. The current proposals are: 1. gray(lightness [, alpha]) In this proposal gray(0%) is [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>These days, there is <a href="http://lists.w3.org/Archives/Public/www-style/2014Jul/0432.html" target="_blank">a lengthy discussion in the CSS WG about how to name a function that produces shades of gray</a> (from white to black) with varying degrees of transparency, and we need your feedback about which name is easier to use.</p><p>The current proposals are:</p><h3>1. gray(lightness [, alpha])</h3><p>In this proposal gray(0%) is black, gray(50%) is gray and gray(100%) is white. It also accepts numbers from 0-255 which correspond to rgb(x,x,x) values, so that gray(255) is white and gray(0) is black. It also accepts an <strong>optional second argument for alpha transparency</strong>, so that gray(0, .5) would be equivalent to rgba(0,0,0,.5).</p><p>This is the naming of the function in the current <a href="http://dev.w3.org/csswg/css-color/#grays" target="_blank">CSS Color Level 4 draft</a>.</p><h3>2. white(lightness [, alpha])</h3><p>Its arguments work in the same way as gray(), but it&#8217;s consistent with the expectation that function names that accept percentages give the &#8220;full effect&#8221; at 100%. gray(100%) sounds like a shade of gray, when it’s actually white. white(100%) is white, which might be more consistent with author expectations. Of course, this also accepts alpha transparency, like all the proposals listed here.</p><h3>3. black(lightness [, alpha])</h3><p>black() would work in the opposite way: black(0%) would be white, black(100%) would be black and black(50%,.5) would be semi-transparent gray. The idea is that people are familiar thinking that way from grayscale printing.</p><h3>4. rgb() with one argument and rgba() with two arguments</h3><p>rgb(x) would be a shorthand to rgb(x, x, x) and rgba(x, y) would be a shorthand to rgba(x, x, x, y). So, rgb(0) would be black and rgb(100%) or rgb(255) would be white. The benefit is that authors are already accustomed to using rgb() for colors, and this would just be a shortcut. However, note how you will need to change the function name to get a semi-transparent version of the color. Also, if in the future one needs to change the color to not be a shade of gray, a function name change is not needed.</p><p>I’ve written <a href="http://sassmeister.com/gist/20ac0049428ccfcbe8f1" target="_blank">some SCSS to emulate these functions</a> so you can play with them in your stylesheets and figure out which one is more intuitive. Unfortunately rgb(x)/rgba(x,a) cannot be polyfilled in that way, as that would overwrite the native rgb()/rgba() functions. Which might be an argument against them, as being able to polyfill through a preprocessor is quite a benefit for a new color format IMO.</p><p>You can <a href="https://docs.google.com/forms/d/1pp3RY-A4MAs7b-gmqFx6bKn52_G_WLoPFkV0vueiWP4/viewform?usp=send_form" target="_blank">vote here</a>, but that’s mainly for easy vote counting. It’s strongly encouraged that you also leave a comment justifying your opinion, either here or in the list.</p><p><a href="https://docs.google.com/forms/d/1pp3RY-A4MAs7b-gmqFx6bKn52_G_WLoPFkV0vueiWP4/viewform?usp=send_form" target="_blank" class="view-demo">Vote now!</a></p><p>Also <strong style="font-size: 200%">tl;dr</strong> If you can&#8217;t be bothered to read the post and understand the proposals well, please, refrain from voting.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/UJXuQOJLsb4" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2014/07/an-easy-notation-for-grayscale-colors/feed/</wfw:commentRss>
      <slash:comments>39</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2014/07/an-easy-notation-for-grayscale-colors/</feedburner:origLink>
    </item>
    <item>
      <title>Image comparison slider with pure CSS</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/0cwnQlV6G_U/</link>
      <comments>http://lea.verou.me/2014/07/image-comparison-slider-with-pure-css/#comments</comments>
      <pubDate>Fri, 25 Jul 2014 00:28:35 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Replies]]></category>
      <category><![CDATA[Tips]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2423</guid>
      <description><![CDATA[As a few of you know, I have been spending a good part of this year writing a book for O’Reilly called “CSS Secrets” (preorder here!). I wanted to include a “secret” about the various uses of the resize property, as it’s one of my favorite underdogs, since it rarely gets any love. However, just mentioning the [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>As a few of you know, I have been spending a good part of this year writing a book for O’Reilly called “CSS Secrets” (<a href="http://shop.oreilly.com/product/0636920031123.do" target="_blank">preorder here!</a>). I wanted to include a “secret” about the various uses of the <code>resize</code> property, as it’s one of my favorite underdogs, since it rarely gets any love. However, just mentioning the typical use case of improving the UX of text fields didn’t feel like enough of a secret at all. The whole purpose of the book is to get authors to think outside the box about what&#8217;s possible with CSS, not to recite widely known applications of CSS features. So I started brainstorming: What else could we do with it?</p><p>Then I remembered <a href="http://demosthenes.info/blog/819/A-Before-And-After-Image-Comparison-Slide-Control-in-HTML5" target="_blank">Dudley’s awesome Before/After image slider from a while ago</a>. While I loved the result, the markup isn&#8217;t great and it requires scripting. Also, both images are CSS backgrounds, so for a screen reader, there are no images there. And then it dawned on me: What if I overlaid a <code>&lt;div&gt;</code> on an image and made it horizontally resizable through the <code>resize</code> property? I tried it, and as you can see below, it worked!</p><p><iframe src="http://dabblet.com/gist/25fa1985bb9f1633c86e" width="100%" height="900"></iframe></p><p>The good parts:</p><ul><li>More semantic markup (2 images &amp; 2 divs). If <code>object-fit</code> was widely <a href="http://caniuse.com/#feat=object-fit" target="_blank">supported</a>, it could even be just one div and two images.</li><li>No JS</li><li>Less CSS code</li></ul><p>Of course, few things come with no drawbacks. In this case:</p><ul><li>One big drawback is keyboard accessibility. Dudley’s demo uses a range input, so it’s keyboard accessible by design.</li><li>You can only drag from the bottom right corners. In Dudley’s demo, you can click at any point in the slider. And yes, I did try to style ::webkit-resizer and increase its size so that at least it has smoother UX in Webkit. However, no matter what I tried, nothing seemed to work.</li></ul><p>Also, none of the two seems to work on mobile.</p><p>It might not be perfect, but I thought it’s a pretty cool demo of what’s possible with the <code>resize</code> property, as everybody seems to only use it in textareas and the like, but its potential is much bigger.</p><p>And now if you’ll excuse me, I have a chapter to write <img src="https://s.w.org/images/core/emoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p><strong>Edit:</strong> It looks like <a href="http://codepen.io/Kseso/pen/dyeBL/" target="_blank">somebody figured out a similar solution</a> a few months ago, which does manage to make the resizer full height, albeit with less semantic HTML and more flimsy CSS. The main idea is that you use a separate element for the resizing (in this case a textarea) with a height of 15px = the height of the resizer. Then, they apply a scaleY() transform to stretch that 15px to the height of the image. Pretty cool! Unfortunately, it requires hardcoding the image size in the CSS.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/0cwnQlV6G_U" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2014/07/image-comparison-slider-with-pure-css/feed/</wfw:commentRss>
      <slash:comments>42</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2014/07/image-comparison-slider-with-pure-css/</feedburner:origLink>
    </item>
    <item>
      <title>Dynamically generated SVG through SASS + A 3D animated RGB cube!</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/1C_cgWtZzhk/</link>
      <comments>http://lea.verou.me/2014/04/dynamically-generated-svg-through-sass-a-3d-animated-rgb-cube/#comments</comments>
      <pubDate>Fri, 04 Apr 2014 00:43:10 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Original]]></category>
      <category><![CDATA[Tips]]></category>
      <category><![CDATA[CSS]]></category>
      <category><![CDATA[CSS 3D transforms]]></category>
      <category><![CDATA[CSS Animations]]></category>
      <category><![CDATA[CSS3]]></category>
      <category><![CDATA[SASS]]></category>
      <category><![CDATA[SVG]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2389</guid>
      <description><![CDATA[Today, I was giving the opening keynote at Codemania in Auckland, New Zealand. It was a talk about color from a math/dev perspective. It went quite well, despite my complete lack of sleep. I mean that quite literally: I hadn’t slept all night. No, it wasn’t the jetlag or the nervousness that kept me up. It [&#8230;]]]></description>
      <content:encoded><![CDATA[<p><a href="http://leaverou.github.io/chroma-zone/rgb-cube.html"><img class="alignleft  wp-image-2392" alt="Screenshot of the cube" src="http://lea.verou.me/wp-content/uploads/2014/04/cube-screenshot.png" width="300" srcset="http://lea.verou.me/wp-content/uploads/2014/04/cube-screenshot.png 704w, http://lea.verou.me/wp-content/uploads/2014/04/cube-screenshot-300x291.png 300w" sizes="(max-width: 704px) 100vw, 704px" /></a>Today, I was giving the opening keynote at <a href="http://codemania.co.nz/" target="_blank">Codemania</a> in Auckland, New Zealand. It was a talk about color from a math/dev perspective. It went quite well, despite my complete lack of sleep. I mean that quite literally: I hadn’t slept all night. No, it wasn’t the jetlag or the nervousness that kept me up. It was my late minute decision to replace the <a href="http://leaverou.github.io/chroma-zone/img/rgb-cube.jpg" target="_blank">static, low-res image of an RGB cube</a> I was using until then with a <strong><a href="http://leaverou.github.io/chroma-zone/rgb-cube.html" target="_blank">3D cube generated with CSS and animated with CSS animations</a></strong>. Next thing I knew, it was light outside and I had to start getting ready. However, I don’t regret literally losing sleep to make a slide that is only shown for 20 seconds at most. Not only it was super fun to develop, but also yielded a few things that I thought were interesting enough to blog about.</p><p><strong>The most challenging part wasn&#8217;t actually the 3D cube.</strong> This has been done tons of times before, it was probably the most common demo for CSS 3D transforms a couple of years ago. The only part of this that could be of interest is that mine only used 2 elements for the cube. This is a dabblet of the cube, without any RGB gradients on it:</p><p><iframe src="http://dabblet.com/gist/9594360" height="800" width="100%"></iframe></p><p><strong>The challenging part was creating the gradients for the 6 sides.</strong> These are not plain gradients, as you can see below:</p><p><a href="http://lea.verou.me/wp-content/uploads/2014/04/gradients.png"><img class="aligncenter size-full wp-image-2390" alt="RGB cube sides" src="http://lea.verou.me/wp-content/uploads/2014/04/gradients.png" width="697" height="465" srcset="http://lea.verou.me/wp-content/uploads/2014/04/gradients.png 697w, http://lea.verou.me/wp-content/uploads/2014/04/gradients-300x200.png 300w" sizes="(max-width: 697px) 100vw, 697px" /></a>These are basically two linear gradients from left to right, with the topmost one being masked with a gradient from top to bottom. You can use <a href="http://dabblet.com/gist/9201622" target="_blank">CSS Masking to achieve this (for Chrome/Safari)</a> and SVG Masks for Firefox, but this masks the whole element, which would hide the pseudo-elements needed for the sides. What I needed was masks applied to backgrounds only, not the whole element.</p><p>It seemed obvious that the best idea would be to use SVG background images. For example, here is <a href="http://dabblet.com/gist/9964928" target="_blank">the SVG background needed for the top left one</a>:</p><pre class="language-markup"><code>&lt;svg
             xmlns="http://www.w3.org/2000/svg" width="200px" height="200px"&gt;

             &lt;linearGradient id="yellow-white" x1="0" x2="0" y1="0" y2="1"&gt;
             &lt;stop stop-color="yellow" /&gt;
             &lt;stop offset="1" stop-color="white" /&gt;
             &lt;/linearGradient&gt;
             &lt;linearGradient id="magenta-red" x1="0" x2="0" y1="0" y2="1"&gt;
             &lt;stop stop-color="red" /&gt;
             &lt;stop offset="1" stop-color="magenta" /&gt;
             &lt;/linearGradient&gt;
             &lt;linearGradient id="gradient" x1="0" x2="1" y1="0" y2="0"&gt;
             &lt;stop stop-color="white" /&gt;
             &lt;stop offset="1" stop-color="black" /&gt;
             &lt;/linearGradient&gt;
             &lt;mask id="gradient-mask"&gt;
             &lt;rect width="100%" height="100%" fill="url(#gradient)"/&gt;
             &lt;/mask&gt;

             &lt;rect width="100%" height="100%" fill="url(#yellow-white)"/&gt;
             &lt;rect width="100%" height="100%" fill="url(#magenta-red)" mask="url(#gradient-mask)"/&gt;

             &lt;/svg&gt;</code></pre><p>However, I didn&#8217;t want to have 6 separate SVG files, especially with this kind of repetition (cross-linking to reuse gradients and masks across different files is still fairly buggy in certain browsers). I wanted to be able to edit this straight from my CSS. And then it hit me: I was using SASS already. I could code SASS functions that generate SVG data URIs!</p><p>Here’s the set of SVG generating SASS functions I ended up writing:</p><pre><code class="language-scss">@function inline-svg($content, $width: $side, $height: $side) {
             @return url('data:image/svg+xml,<svg>#{$content}</svg>');
             }

             @function svg-rect($fill, $width: '100%', $height: $width, $x: '0', $y: '0') {
             @return unquote('');
             }

             @function svg-gradient($id, $color1, $color2, $x1: 0, $x2: 0, $y1: 0, $y2: 1) {
             @return unquote('

             ');
             }

             @function svg-mask($id, $content) {
             @return unquote('#{$content}');
             }</code></pre><p>And then I was able to generate each RGB plane with another function that made use of them:</p><pre><code class="language-scss">@function rgb-plane($c1, $c2, $c3, $c4) {
             @return inline-svg(
             svg-gradient('top', $c1, $c2) +
             svg-gradient('bottom', $c3, $c4) +
             svg-gradient('gradient', white, black, 0, 1, 0, 0) +
             svg-mask('gradient-mask', svg-rect('url(%23gradient)')) +
             svg-rect('url(%23bottom)') +
             svg-rect('url(%23top)" mask="url(%23gradient-mask)')
             );
             }

             /* ... */

             .cube {
             background: rgb-plane(blue, black, aqua, lime);

             &amp;::before {
             background: rgb-plane(blue, fuchsia, aqua, white);
             }

             &amp;::after {
             background: rgb-plane(fuchsia, red, blue, black);
             }
             }

             .cube .sides {
             background: rgb-plane(yellow, lime, red, black);

             &amp;::before {
             background: rgb-plane(yellow, white, red, fuchsia);
             }

             &amp;::after {
             background: rgb-plane(white, aqua, yellow, lime);
             }
             }</code></pre><p>However, the same functions can be used for all sorts of SVG backgrounds and it’s very easy to add a new one. E.g. to make polygons:</p><pre><code class="language-scss">@function svg-polygon($fill, $points) {
             @return unquote('');
             }

             @function svg-circle($fill, $r: '50%', $cx: '50%', $cy: '50%') {
             @return unquote('');
             }</code></pre><p>You can see <a href="http://leaverou.github.io/chroma-zone/rgb-cube.scss" target="_blank">the whole SCSS file here</a> and <a href="http://leaverou.github.io/chroma-zone/rgb-cube.css" target="_blank">its CSS output here</a>.</p><p><strong>Warning:</strong> Keep in mind that IE9 and some older versions of other browsers have issues with unencoded SVG data URIs. Also, you still need to escape hashes (<code>%23</code> instead of <code>#</code>), otherwise Firefox fails.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/1C_cgWtZzhk" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2014/04/dynamically-generated-svg-through-sass-a-3d-animated-rgb-cube/feed/</wfw:commentRss>
      <slash:comments>33</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2014/04/dynamically-generated-svg-through-sass-a-3d-animated-rgb-cube/</feedburner:origLink>
    </item>
    <item>
      <title>I’m going to MIT!!</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/ugauONbnNeA/</link>
      <comments>http://lea.verou.me/2014/02/im-going-to-mit/#comments</comments>
      <pubDate>Tue, 11 Feb 2014 18:27:04 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Personal]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2357</guid>
      <description><![CDATA[Last year, I did something crazy, that I&#8217;ve been wanting to do since I was little: I applied to MIT’s PhD program in Electrical Engineering and Computer Science. It was not only crazy because I have been working for several years already, but also because I only applied to MIT, as I decided I did [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>Last year, I did something crazy, that I&#8217;ve been wanting to do since I was little: I applied to MIT’s PhD program in Electrical Engineering and Computer Science.</p><p><img alt="One of the letters" src="http://lea.verou.me/wp-content/uploads/2014/02/Screen-Shot-2014-02-11-at-18.25.21-.png" style="border:10px solid silver" /></p><p>It was not only crazy because I have been working for several years already, but also because I only applied to MIT, as I decided I did not want to go to any other university, both for pragmatic and emotional reasons. As any prospective grad student will tell you, applying to only one top university is recipe for failure. I didn&#8217;t tell many people, but everyone who knew thought I&#8217;d get in — except me. You see, I wasn&#8217;t a typical candidate. Sure, I have done lots of things I&#8217;m proud of, but I didn&#8217;t have an amazing GPA or publications in prestigious academic conferences.</p><p>It felt like a very long shot, so you can imagine my excitement when I received the letters of acceptance, about a week ago. I will remember that moment forever. I was watching Breaking Bad, feeling miserable over a breakup that happened only a few hours earlier. About a minute into the episode (s05e09), I saw an email notification titled “Your application to MIT EECS”. My first thought was that there was some problem with my application. And then I read the first few lines:</p><blockquote><p>Dear Michailia Verou:</p><p>If you have not already heard from them, you will shortly receive a letter from the EECS department at MIT, informing you that you have been admitted to the graduate program in Computer Science at MIT next fall. Congratulations!!</p></blockquote><p>WHAAAA? Was it a scam? But then, how did they have all my details? Holy mother of the Flying Spaghetti Monster, I got in!!! Soon thereafter, a letter from <a href="http://www.csail.mit.edu/">CSAIL</a> followed (where I said I wanted to work, specifically in the <a href="http://groups.csail.mit.edu/uid/">UID</a>), and then even more letters. I started calling everyone who knew I applied to share the news, though it proved quite hard to form sentences instead of uncontrollably screaming in joy. I was (and am!) so excited about the future, that it completely overshadows any other life problems (at least for the time being).</p><p>Of course, my happiness is mixed with sheer terror. I keep worrying that I will be the dumbest person in the room, or that I don’t remember as much from my undergrad studies as the others will. I’m even terrified of meeting my future advisor(s) in case getting to know me better makes them wonder why I was accepted. But I try to remind myself about <a href="http://en.wikipedia.org/wiki/Impostor_syndrome" target="_blank">impostor syndrome</a>, and from what I&#8217;ve read in forums &amp; blogs, it seems that I&#8217;m not alone in having such fears.</p><p>I held off blogging about it until I felt I was able to write something coherent, but I can’t wait to share my excitement any longer.</p><p>To the future!</p><p>To real life plot twists!</p><p>To MIT!</p><p>Boy, I’m thrilled. <img src="https://s.w.org/images/core/emoji/2/72x72/1f600.png" alt="😀" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><img src="http://feeds.feedburner.com/~r/leaverou/~4/ugauONbnNeA" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2014/02/im-going-to-mit/feed/</wfw:commentRss>
      <slash:comments>510</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2014/02/im-going-to-mit/</feedburner:origLink>
    </item>
    <item>
      <title>Introducing Whathecolor: A color game for web developers!</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/0IyHxhG0aWY/</link>
      <comments>http://lea.verou.me/2014/02/whathecolor-a-color-game-for-web-developers/#comments</comments>
      <pubDate>Sat, 08 Feb 2014 16:16:12 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Apps & scripts]]></category>
      <category><![CDATA[Original]]></category>
      <category><![CDATA[colors]]></category>
      <category><![CDATA[css3 colors]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2342</guid>
      <description><![CDATA[I’ve been interested in digital color for a long time, and this year I decided to risk giving a technical talk about color some of the conferences I’m speaking at. “Why is that risky?” you might ask. Well, it might end up being really interesting, or it may end up alienating both designers because it’s [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>I’ve been interested in digital color for a long time, and this year I decided to risk giving a technical talk about color some of the conferences I’m speaking at. “Why is that risky?” you might ask. Well, it might end up being really interesting, or it may end up alienating both designers because it’s too technical and developers because it’s about a “designery” topic.</p><p>In preparation for this talk, I decided to make a simple game to see how well I and other web developers understand color, and especially CSS notations of color. Meet <a href="http://leaverou.github.io/whathecolor" target="_blank">Whathecolor</a>!</p><p>The idea is simple: You are presented with a color and you try to type in a CSS color that matches it. It could be anything, from hsl() or rgb() to even named colors (although that would be stupid). It would be interesting to see what averages people get by trying hsl() vs rgb() and whether the former is as easier for web developers as we think. Feel free to post your results here or on twitter! Perhaps in the future, something like this could be used by the CSS WG to test the usability of color notations we’re thinking of adding to CSS instead of speculating about it.</p><p>Disclaimer: This is a quick hack. Please don’t complain that it doesn&#8217;t look great on your phone and stuff like that.</p><p>Also, yes, if you want to cheat, it’s super easy, but I have no idea why somebody would cheat on something like this.</p><p><a class="view-demo" href="http://leaverou.github.io/whathecolor">Play</a></p><h3>Color proximity</h3><p>A challenging part in developing this was calculating the proximity of two colors to show the user how close they are getting. My first thought was to use the Euclidean distance of the two colors in the RGB cube and divide it by the maximum distance the color could have from any other RGB color. However, this proved out to be inaccurate in many cases, probably due to the lack of perceptual uniformity in RGB. As an example, try <code>#f0f</code> and <code>#ff80ff</code>. Although they are quite similar visually, the reported proximity was around 66% (1 &#8211; 128/382).</p><p>So I researched  existing algorithms to get the proximity of two colors. Like most things color-related, it looks like <a href="http://en.wikipedia.org/wiki/Color_difference" target="_blank">Color Difference</a> is not quite as simple as I thought, and is considered a topic of interest in Color Science. However, converting to L*a*b* and using the CIE94 and CIEDE2000 formulas seemed a bit of an overkill for this and I wasn&#8217;t terribly impressed with the CIE76 formula after trying the results out <a href="http://colormine.org/delta-e-calculator/" target="_blank">online</a> for some sample pairs (e.g. it gives ~60% for the aforementioned pair, which is even lower than what I got with my naïve RGB method!).</p><p>So I experimented a bit and ended up using an average of my original idea and a sum of the HSL differences (divided by the max differences), which seems to work relatively ok.  There are still cases where it’s off, but ho hum. After all, the proximity is mainly useful when you get close enough to the color (&gt;90%), as until then you tend to play it by eye. Any improvements on the algorithm used are welcome. Or if enough people think it’s not working very well, I’ll bite the bullet and end up using DeltaE.</p><h3>Other notes</h3><ul><li>You do not need a proximity of 100% to win, since rounding errors might prevent you from matching the exact color if you&#8217;re using HSL. Also, because matching the exact same color isn&#8217;t really important, as long as you get close enough that any difference is imperceptible.</li><li>I wrote a Color “class” for this, which you can find in <a href="http://leaverou.github.io/whathecolor/color.js" target="_blank">color.js</a>. Like most of my open source stuff, it’s MIT licensed. Maybe it could be useful in some other color-related project, who knows.</li><li>My original idea was to have “levels”, where the color would get increasingly more difficult to get. For example, in the first level, you&#8217;d only have to guess simple colors whose RGB coordinates were either 0, 128 or 255. So, my Color.random() method accepts an entropy parameter, for that level. However, when I tested the game with truly random colors (any integer from 0 to 255), it turned out it wasn&#8217;t really that hard (it took me about a minute to guess each color), so I ditched the idea of levels early on. The code is still there though.</li><li>An idea about making it harder in the future would be to introduce semi-transparent (RGBA/HSLA) colors. That would be fun :evil_grin:</li></ul><p><a href="http://lea.verou.me/wp-content/uploads/2014/02/Screen-Shot-2014-02-08-at-02.36.12-.png"><img alt="Screenshot" src="http://lea.verou.me/wp-content/uploads/2014/02/Screen-Shot-2014-02-08-at-02.36.12-.png" width="980" height="597" /></a>PS: The times in this screenshot aren’t real, I wanted to take one quickly, so I used the dev tools.</p><p>&nbsp;</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/0IyHxhG0aWY" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2014/02/whathecolor-a-color-game-for-web-developers/feed/</wfw:commentRss>
      <slash:comments>33</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2014/02/whathecolor-a-color-game-for-web-developers/</feedburner:origLink>
    </item>
    <item>
      <title>Vote for me in the net awards 2014!</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/x-fW7cwN2V8/</link>
      <comments>http://lea.verou.me/2014/01/vote-for-me-in-the-net-awards-2014/#comments</comments>
      <pubDate>Thu, 30 Jan 2014 09:35:11 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Personal]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2334</guid>
      <description><![CDATA[I was excited and surprised to find out I’ve been in the 10 finalists for two (2!) categories in the net awards this year: Outstanding contribution Conference Talk of the Year (for The humble border-radius) You can vote for me by clicking the above links and have my eternal gratitude 🙂 Furthermore, the CERN line [&#8230;]]]></description>
      <content:encoded><![CDATA[<p><a href="https://thenetawards.com/vote/contribution/lea-verou/"><img class="alignright" alt="" src="http://future-publishing.msgfocus.com/files/amf_future_publishing/project_270/net-awards-2014-nominee-ribbon.png" width="200" /></a>I was excited and surprised to find out I’ve been in the 10 finalists for two (2!) categories in the net awards this year:</p><ul><li><a href="https://thenetawards.com/vote/contribution/lea-verou/" target="_blank">Outstanding contribution</a></li><li><a href="https://thenetawards.com/vote/talk/lea-verou-the-humble-border-rad/" target="_blank">Conference Talk of the Year</a> (for The humble border-radius)</li></ul><p>You can vote for me by clicking the above links and have my eternal gratitude <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>Furthermore, the CERN line mode browser project, of which <a href="http://line-mode.cern.ch/interviews/" target="_blank">I was a part of</a>, has been <a href="https://thenetawards.com/vote/collaboration/line-mode-browser-2013/" target="_blank">nominated in “Best Collaborative Project”</a>!</p><p>I’ve given “The humble border-radius” more than once, so you can pick one to watch below (in the net awards page they’ve linked to the FOWD London one):</p><ul><li><a style="line-height: 1.5em;" href="http://vimeo.com/70171266" target="_blank">CSSDay</a></li><li><a href="http://cssconf.com/talk-verou.html" target="_blank">CSSConf</a></li><li><a href="http://www.futureinsights.com/home/lea-verou-keynote-the-humble-border-radius.html" target="_blank">FOWD London</a></li><li><a href="http://vimeo.com/67567648" target="_blank">Front-Trends</a></li><li><a href="http://www.youtube.com/watch?v=JSaMl2OKjfQ" target="_blank">Abridged version (only 15 minutes!) from this year’s O’Reilly Fluent</a></li></ul><p>I would recommend the CSSDay one, as it changes every time and that one is newer.</p><p>Thanks again to anyone who nominated me and everyone who votes for me. You&#8217;re all wonderful. &lt;3</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/x-fW7cwN2V8" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2014/01/vote-for-me-in-the-net-awards-2014/feed/</wfw:commentRss>
      <slash:comments>52</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2014/01/vote-for-me-in-the-net-awards-2014/</feedburner:origLink>
    </item>
    <item>
      <title>Smooth state animations with animation-play-state</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/PuOCZyXZkVg/</link>
      <comments>http://lea.verou.me/2014/01/smooth-state-animations-with-animation-play-state/#comments</comments>
      <pubDate>Thu, 09 Jan 2014 13:00:21 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Tips]]></category>
      <category><![CDATA[CSS]]></category>
      <category><![CDATA[CSS3 animations]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2315</guid>
      <description><![CDATA[When a CSS animation is applied from the beginning of the page load, things are easy. You just use the animation property with appropriate parameters, and you’re done. However, what if the animation is applied on a certain state, e.g. :hover, :active, :focus or a JS-triggered class change? A naïve approach would be to try [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>When a CSS animation is applied from the beginning of the page load, things are easy. You just use the animation property with appropriate parameters, and you’re done. However, what if the animation is applied on a certain state, e.g. :hover, :active, :focus or a JS-triggered class change?</p><p>A naïve approach would be to try something like this:</p><p><iframe src="http://dabblet.com/gist/8334474" width="100%" height="400"></iframe></p><p>However, this means that when you hover out of the element, it abruptly snaps to its original state (no rotation). In many cases, it would be a more desirable to have it freeze in the last shown frame, until we hover over it again. To achieve that, we can apply the animation from the beginning, with <code>animation-play-state: paused;</code> and just change it on :hover to <code>animation-play-state: running;</code>. This is what happens then:</p><p><iframe src="http://dabblet.com/gist/8333352" width="100%" height="400"></iframe></p><p>I figured this out when I was recently helping my good friend <a href="http://twitter.com/juliancheal" target="_blank">Julian</a> with <a href="http://juliancheal.co.uk" target="_blank">his one page website</a>*. When you hover over the figure, it starts scrolling, but when you hover out of it, it doesn’t snap back to its original position, which would’ve looked awful.</p><p>*Beware it’s still a bit rough around the edges, e.g. the result has some rendering bugs on Firefox &#038; IE plus some unsupported features messing it up (e.g. baseline-shift in SVG), but those are for another day as I had work to do and this ended up taking longer than the few hours I expected. Beyond the animation, you might want to explore the CSS-only <em>buttons</em> (see what I did there?) or the leather figure frame. Credits to <a href="https://twitter.com/laurakalbag" target="_blank">Laura Kalbag</a> for the tweed background &#038; color scheme. I also experimented with SASS on this one and found it much smoother to work with than LESS, so I might stick with it for those cases where I need a preprocessor.</p><p><a href="http://juliancheal.co.uk" target="_blank"><img src="http://lea.verou.me/wp-content/uploads/2014/01/Screen-Shot-2014-01-09-at-14.45.40--1024x558.png" alt="Screenshot" class="alignleft size-large wp-image-2316" srcset="http://lea.verou.me/wp-content/uploads/2014/01/Screen-Shot-2014-01-09-at-14.45.40--1024x558.png 1024w, http://lea.verou.me/wp-content/uploads/2014/01/Screen-Shot-2014-01-09-at-14.45.40--300x163.png 300w, http://lea.verou.me/wp-content/uploads/2014/01/Screen-Shot-2014-01-09-at-14.45.40-.png 1080w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p><img src="http://feeds.feedburner.com/~r/leaverou/~4/PuOCZyXZkVg" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2014/01/smooth-state-animations-with-animation-play-state/feed/</wfw:commentRss>
      <slash:comments>45</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2014/01/smooth-state-animations-with-animation-play-state/</feedburner:origLink>
    </item>
    <item>
      <title>Simple script: Automatic talks list</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/ASOW2V5gf40/</link>
      <comments>http://lea.verou.me/2013/12/simple-script-automatic-talks-list/#comments</comments>
      <pubDate>Sat, 28 Dec 2013 23:16:15 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Speaking]]></category>
      <category><![CDATA[JavaScript]]></category>
      <category><![CDATA[JSON]]></category>
      <category><![CDATA[speaking]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2301</guid>
      <description><![CDATA[I guess this will not be useful to many, but thought I&#8217;d open source it anyway, in case someone else finds it useful. I mostly wrote it because after 50+ conferences, I got seriously fed up updating the list by editing the HTML manually. Now I will only have to edit a JSON file manually! [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>I guess this will not be useful to many, but thought I&#8217;d open source it anyway, in case someone else finds it useful. I mostly wrote it because after 50+ conferences, I got seriously fed up updating <a href="http://lea.verou.me/speaking">the list</a> by editing the HTML manually. Now I will only have to edit <a href="http://leaverou.github.io/talks/talks.json">a JSON file</a> manually! <img src="https://s.w.org/images/core/emoji/2/72x72/1f61b.png" alt="😛" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>Admittedly, it’s not my best code (more like a quick hack), but it should be pretty easy to adapt to your needs, even to adapt it to lists of different things instead of talks. Using it for talks is very straight forward: Include the CSS and JS, add a list with a class of &#8220;talks&#8221; where you want it, done.</p><p>Hope you enjoy it <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>Links: <a href="http://lea.verou.me/speaking/" class="view-demo">Live demo</a> | <a href="https://github.com/LeaVerou/talks">Github repo</a> | <a href="http://leaverou.github.io/talks/">Script page</a></p><img src="http://feeds.feedburner.com/~r/leaverou/~4/ASOW2V5gf40" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/12/simple-script-automatic-talks-list/feed/</wfw:commentRss>
      <slash:comments>22</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/12/simple-script-automatic-talks-list/</feedburner:origLink>
    </item>
    <item>
      <title>CSS is for developers</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/7wugLYslC2M/</link>
      <comments>http://lea.verou.me/2013/12/css-is-for-developers/#comments</comments>
      <pubDate>Thu, 05 Dec 2013 22:08:43 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Thoughts]]></category>
      <category><![CDATA[CSS]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2290</guid>
      <description><![CDATA[Quite often people assume that because the language I focus on is CSS, I must be a web designer. Don’t get me wrong, I love visual design with a passion. I have studied it a lot over the years and I’ve worked on several design projects for clients. Heck, I even have a dribbble profile! [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>Quite often people assume that because the language I focus on is CSS, I <em>must</em> be a web designer. Don’t get me wrong, I love visual design with a passion. I have studied it a lot over the years and I’ve worked on several design projects for clients. Heck, I even have <a href="http://dribbble.com/LeaVerou" target="_blank">a dribbble profile</a>!</p><p>However, <strong>if I had to pick one role, I would definitely consider myself more of a developer than a designer.</strong><a href="http://lea.verou.me/2012/05/how-i-got-into-web-development-the-long-version/" target="_blank">I discovered coding on my own when I was 12</a> and so far it has been the most long lasting love of my life. Although I lost my coding virginity to Visual Basic (something I’m still embarrassed about), over the years I’ve coded in Java, C, C++, C#, PHP, JavaScript before I even got to CSS. I’ve actually studied Computer Science at university, graduated 4th in my class and I’m <a href="http://lea.verou.me/2014/02/im-going-to-mit/" target="_blank">gonna be doing research at MIT towards a PhD, starting fall 2014</a>. Regarding design, I&#8217;m completely self-taught. My personality is more similar to the developers I know than the designers I know. Coding comes naturally, but I have to struggle to get better at design. I&#8217;m a better developer than I will ever be a designer.</p><p>Still, the assumption often is that <em>I can’t possibly be a developer and interested in CSS, when there are all these amazing programming languages to focus my energy on instead. Therefore I must be a designer …right?</em> There are even people who know about <a href="https://github.com/LeaVerou/" target="_blank">my open source projects</a>, and still think that I can’t code in JavaScript or any other programming language (not sure how you can make most of these tools with pure CSS, but since <a href="http://eli.fox-epste.in/rule110-full.html" target="_blank">CSS is Turing complete</a>, I guess there must be a way!).</p><p>If you think I’m an exception, you’re mistaken. <a href="http://www.w3.org/Style/CSS/members.en.php3" target="_blank">Everyone else in the W3C CSS Working Group</a>, the group which defines the future of CSS, fits the profile of a developer much more than that of a designer. In fact, I might be the most designer-y person in it! Even outside the WG, the people I know who are really good at CSS, are either developers or hybrids (designers &amp; developers).</p><p>This is no coincidence.<strong> The skills required to write good CSS code are by and large the same skills required to write good code in general.</strong> CSS code also needs to be <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself" target="_blank">DRY</a>, maintainable, flexible etc. CSS might have a visual output, but is still code, just like SVG, WebGL/OpenGL or the JavaScript Canvas API. It still requires the same kind of analytical thinking that programming does. Especially these days that most people use preprocessors for their CSS, with variables, math, conditionals and loops, it’s almost starting to look like programming!</p><p>I find it counter-productive that CSS in most jobs is assigned to designers. Designers should be doing what they do best and love: Design. Sure, they should be aware of the practical limitations of the medium and should be able to read and lightly edit CSS or hack together a prototype to show how their design behaves in different conditions, but it shouldn’t be their job to write CSS for production. The talents required to be a good designer and a good coder are very different and it’s unreasonable to expect both from everyone. Also, when you know you’re gonna have to implement the design you’re working on, it’s tempting to produce designs that can be easily converted to CSS, instead of pushing the boundaries. We don’t usually expect developers to design, even though it’s an added bonus when they have an eye for design as well. It should be the same for designers.</p><p>And if you’re a designer who writes amazing CSS and is about to tell me off in the comments, hold your horses. <strong>I’m not saying you shouldn’t be coding CSS.</strong> I’m saying that <strong>if you&#8217;re good at it, it means you&#8217;re both</strong> a designer AND a developer. Own it! <img src="https://s.w.org/images/core/emoji/2/72x72/1f600.png" alt="😀" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><img src="http://feeds.feedburner.com/~r/leaverou/~4/7wugLYslC2M" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/12/css-is-for-developers/feed/</wfw:commentRss>
      <slash:comments>62</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/12/css-is-for-developers/</feedburner:origLink>
    </item>
    <item>
      <title>Cleanest CSS spinner, ever</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/S6DE1C4fKbI/</link>
      <comments>http://lea.verou.me/2013/11/cleanest-css-spinner-ever/#comments</comments>
      <pubDate>Fri, 29 Nov 2013 04:26:26 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Tips]]></category>
      <category><![CDATA[CSS]]></category>
      <category><![CDATA[CSS3 animations]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2282</guid>
      <description><![CDATA[For some reason, I seem to have a fascination with CSS loaders these days. After recreating the Google loader with clean CSS recently, I set off to recreate the classic spinner with CSS. Yes, I know this has been done zillions of times, but I wanted a clean, maintainable, reusable solution, not just a proof [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>For some reason, I seem to have a fascination with CSS loaders these days. After <a href="http://lea.verou.me/2013/11/flexible-google-style-loader-with-css/" target="_blank">recreating the Google loader with clean CSS</a> recently, I set off to recreate the classic spinner with CSS. Yes, I know this has been done zillions of times, but I wanted a clean, maintainable, reusable solution, not just a proof of concept. Something with not tons of CSS and/or HTML elements.</p><p>I managed to recreate it with only 2 elements. I&#8217;m still not completely satisfied, as I was hoping to come up with a solution with just one element, but it&#8217;s still much better than all those solutions out there that use tons of elements and code.</p><p>So, how did I do it?</p><ul><li>I use the <code>::before</code> and <code>::after</code> pseudoelements of the parent and child div to create the 4 first bars</li><li>I use <code>box-shadow</code> with no blur on all four of the above to create the remaining 4 bars</li><li>I rotate the whole element with a <code>steps(8)</code> timing function to create the animation</li></ul><p>As with the Google-style loader, just changing the <code>font-size</code> on this scales the whole element, as everything is sized with ems. Also, there is fallback text, to make it accessible to screen readers. Tested in Chrome, Firefox, Safari, IE10. Should degrade gracefully on IE9 (spinner should look fine, just no animation).</p><p>Using a preprocessor for variables and calculations should simplify the code even further.</p><p>Enjoy <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p><iframe src="http://dabblet.com/gist/7615212" width="100%" height="300"></iframe></p><p>Ideas for further improvement are welcome. Remember that it&#8217;s not just the size of the code that matters, but also its simplicity.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/S6DE1C4fKbI" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/11/cleanest-css-spinner-ever/feed/</wfw:commentRss>
      <slash:comments>99</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/11/cleanest-css-spinner-ever/</feedburner:origLink>
    </item>
    <item>
      <title>Flexible Google-style loader with CSS</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/jMPuznv9SGY/</link>
      <comments>http://lea.verou.me/2013/11/flexible-google-style-loader-with-css/#comments</comments>
      <pubDate>Mon, 11 Nov 2013 07:02:25 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Tips]]></category>
      <category><![CDATA[CSS]]></category>
      <category><![CDATA[CSS3 animations]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2261</guid>
      <description><![CDATA[So, for a while I had noticed the nice sutble loader Google apps use and I was wondering if it would be easy to make with CSS and CSS animations: Yesterday, I realised that you can get this effect by increasing border size until about the middle of the element, as long as the total [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>So, for a while I had noticed the nice sutble loader Google apps use and I was wondering if it would be easy to make with CSS and CSS animations: <img alt="Google’s loader" src="https://maps.gstatic.com/tactile/omnibox/loading.gif" /></p><p>Yesterday, I realised that you can get this effect by increasing border size until about the middle of the element, as long as the total width stays the same (by using <code>box-sizing: border-box</code>):</p><p><iframe src="http://dabblet.com/gist/7408996" height="400" width="100%"></iframe></p><p>However, as you can see above, after the midpoint, the border is not curved any more, so does not produce the desired effect. However, what if we split the background colour in half, and animated <code>border-left</code><em>until</em> 50% of the width and then <code>border-right</code><em>from</em> 50% of the width? That worked, but only gave us 25% of the effect. I could recreate the whole effect by then animating border-top/bottom instead etc, but it&#8217;s easier to apply <code>animation-direction: alternate</code> to alternate between showing and hiding the circle and and simultaneously rotate the loader by 90deg each time, by applying <code>animation-timing-function: steps(4)</code> to a rotate animation that runs over 4x the duration of the border animation.</p><p>This is the finished result:</p><p><iframe src="http://dabblet.com/gist/7387255" height="300" width="100%"></iframe></p><p>The dimensions are all set in ems so that you can change the size in one place: Just change the font-size and the loader scales perfectly. It’s also accessible to screen reader users, as there is still text there.</p><p>And yes, it&#8217;s not super useful as-is, there are tons of spinners on the Web that you can use instead. However, I decided to post it (instead of just tweeting it) as I thought the techniques involved in making it might be interesting for some of you <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><img src="http://feeds.feedburner.com/~r/leaverou/~4/jMPuznv9SGY" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/11/flexible-google-style-loader-with-css/feed/</wfw:commentRss>
      <slash:comments>49</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/11/flexible-google-style-loader-with-css/</feedburner:origLink>
    </item>
    <item>
      <title>Slanted tabs with CSS 3D transforms</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/2PYR06FIPE4/</link>
      <comments>http://lea.verou.me/2013/10/slanted-tabs-with-css-3d-transforms/#comments</comments>
      <pubDate>Fri, 18 Oct 2013 13:15:38 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Tips]]></category>
      <category><![CDATA[CSS3]]></category>
      <category><![CDATA[CSS3 transforms]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2252</guid>
      <description><![CDATA[Not sure if I&#8217;m the first to come up with this idea, but I searched and didn’t find anything. So, for a long time, I was wondering if there&#8217;s an easy way to create trapezoid shapes in CSS, especially with borders etc. Eventually, I realized that I could use a pseudo-element for the background and [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>Not sure if I&#8217;m the first to come up with this idea, but I searched and didn’t find anything. So, for a long time, I was wondering if there&#8217;s an easy way to create trapezoid shapes in CSS, especially with borders etc. Eventually, I realized that I could use a pseudo-element for the background and 3D rotate it, so that it appears like a trapezoid. Then <a href="http://twitter.com/krofdrakula" target="_blank">@krofdrakula</a> suggested on twitter that I could even add border-radius so that it looks like a tab, so I added that as well:</p><p><iframe src="http://dabblet.com/gist/6867917" height="250" width="100%"></iframe></p><p>Eventually I thought, why not actually turn this into a tab demo? So I made a dabblet with that. And then I realized that if you change the transform-origin, other interesting tab shapes appear! Enjoy:</p><p><iframe src="http://dabblet.com/gist/7039790" height="700" width="100%"></iframe></p><p>The best part? It degrades pretty gracefully on browsers that don&#8217;t support transforms! You get nice rounded tabs that just aren&#8217;t slanted (although they have a pretty large top padding, but you can use Modernizr for that. Try it for yourself by commenting the transform out in the dabblet and see the result.</p><p>Another issue is that the angled lines look a bit aliased in Firefox, but that&#8217;s a bug that will eventually get fixed. </p><p>In general, it’s a bit rough around the edges, so treat it more as a proof of concept. But with a little more work, it could totally work in production. Tested in Chrome, Safari, Firefox, IE9 (fallback) and IE10.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/2PYR06FIPE4" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/10/slanted-tabs-with-css-3d-transforms/feed/</wfw:commentRss>
      <slash:comments>51</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/10/slanted-tabs-with-css-3d-transforms/</feedburner:origLink>
    </item>
    <item>
      <title>What makes speakers happy</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/SWu7-mflfQo/</link>
      <comments>http://lea.verou.me/2013/07/what-makes-speakers-happy/#comments</comments>
      <pubDate>Fri, 19 Jul 2013 20:15:39 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Speaking]]></category>
      <category><![CDATA[Thoughts]]></category>
      <category><![CDATA[conferences]]></category>
      <category><![CDATA[speaking]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2233</guid>
      <description><![CDATA[I wish I could speak at CSSConf.eu, but unfortunately I had to decline the invitation, as it collided with a prior speaking engagement I had agreed on. I recently got another email from the organizers with an interesting question: We want to make this event as stress-free for our speakers as possible. Since you spoke [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>I wish I could speak at <a href="http://cssconf.eu" target="_blank">CSSConf.eu</a>, but unfortunately I had to decline the invitation, as it collided with a prior speaking engagement I had agreed on. I recently got another email from the organizers with an interesting question:</p><blockquote><p>We want to make this event as stress-free for our speakers as possible. Since you spoke at a bunch of events, can you share a tip or two about what will make a speakers’ life easier, and their stay more pleasant? Any typical mistakes we can avoid?</p></blockquote><p>I thought it was lovely that they care about their speakers enough to ask this, this already places them above average. I started writing a reply, but I soon realized this is information that could be useful for other conference organizers as well, so I decided to post it here instead. So, what makes speakers happy?</p><h2>The baseline</h2><p>These are things every good conference is doing for their speakers, although they often miss one or two. They keep speakers happy, but they &#8216;re not out of the ordinary.</p><ul><li><span style="line-height: 13px;">Cover their flights, accommodation for the entire conference and ground transportation from/to the airport (with a car, not public transport!).</span></li><li>Do not expect them to go through the hassle of booking all those themselves and then sending you receipts. Offer it as an option, but book them yourself by default.</li><li>Do not book flights without confirming the itinerary and personal info with them first. Also, this sounds obvious, but it&#8217;s surprising how many conferences have made this mistake with me: <strong>Type their name correctly</strong> when booking flights!</li><li>If hotel WiFi is not free, make sure it’s covered and included in their reservation. Same goes for breakfast.</li><li>Offer a honorarium, at least to those who have to take time off work to speak at your event (e.g. freelancers). Even if your budget is small and can only give a tiny honorarium, it will at least cover their meals, cabs etc while there. If the honorarium is small and mainly intended to cover miscellaneous expenses of the trip, don&#8217;t ask them to submit an invoice to claim it.</li><li><span style="line-height: 13px;">Have a speakers dinner before the event, where they can meet and socialize with the other speakers. This is also good for the conference, as they get the chance to catch up with their speaker friends (there aren&#8217;t that many people on the conference circuit, so we often know each other and want to catch up)  so they will talk more to the attendees during the conference. </span>Make sure the speakers dinner does not overlap with the pre-party, if you have one.</li><li>Do a tech check before their talk to make sure everything is smooth. Have dongles for Mac laptops. Have clickers they could use. Use wireless lapel microphones. Have a reliable private wifi network for speakers to use if they need an internet connection for their talk.</li><li>Have breaks between talks so they have some margin of going overtime without impacting the schedule. If they are too stressed about going through their talk fast, it won&#8217;t be a very good talk.</li></ul><h2>Going the extra mile</h2><p>These are all things one or more conferences have done for me, but they are not generally common so they are a positive surprise when they happen, not something expected.</p><ul><li><span style="line-height: 13px;">Book Business class flights, especially for longer flights where passengers are expected to sleep. It’s so much more comfortable to sleep in a seat that fully reclines! I was incredibly grateful to the one conference that did this.</span></li><li>Cover incidentals in the hotel. Yes, it’s a bit risky but come on, we’re not rockstars. We won’t screw you over. In most cases it will be a pretty small extra cost and it looks really good, it tells speakers you trust them and want them to have a good time.</li><li>Offer a speaker gift bag. It can contain all kinds of things: Stuff that will make their stay more comfortable (stain remover, travel toothbrush etc), souvenirs from the place since we rarely have time to do touristy stuff, alcohol for impromptu get togethers with other speakers, snacks to eat during a late night craving in the hotel room, anything goes and I’ve seen conferences put all kinds of stuff in there. It’s a nice welcome gesture. Bonus points if they’re personalized based on what you’ve researched about the speaker.</li><li>Send out a survey to the audience after the conference and <strong>let the speakers know how they did</strong>. Let them know what comments their talk got and how well they did compared to other speakers.</li></ul><p>Also, make sure you read <a href="http://quirksmode.org/coh/" target="_blank">PPK’s excellent Conference Organizer’s Handbook</a>.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/SWu7-mflfQo" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/07/what-makes-speakers-happy/feed/</wfw:commentRss>
      <slash:comments>38</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/07/what-makes-speakers-happy/</feedburner:origLink>
    </item>
    <item>
      <title>Leaving W3C</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/3qyh7xhdC8Q/</link>
      <comments>http://lea.verou.me/2013/07/leaving-w3c/#comments</comments>
      <pubDate>Thu, 11 Jul 2013 08:27:38 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Personal]]></category>
      <category><![CDATA[W3C]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2211</guid>
      <description><![CDATA[About a year ago, I announced I was joining W3C as a full-time staff member, to work on Developer Relations and education. Working at W3C was a dream come true and I can’t say I was disappointed. Over the past year I&#8217;ve worked with some amazingly brilliant people, hopefully increased awareness for web standards in [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>About a year ago, <a href="http://lea.verou.me/2012/08/lea-at-w3-org/">I announced I was joining W3C</a> as a full-time staff member, to work on Developer Relations and education. Working at <a href="http://w3.org" target="_blank">W3C</a> was a dream come true and I can’t say I was disappointed. Over the past year I&#8217;ve worked with some amazingly brilliant people, hopefully increased awareness for web standards in the developer community and helped materialize the vision behind <a href="http://WebPlatform.org">WebPlatform.org</a>. It’s been a fun ride and working for a non-profit was very fulfilling. If somebody told me a year ago that I would decide to leave W3C on my own free will, I would’ve asked them what they were smoking. However, our future selves often surprise us and although it was the most difficult decision of my life, I recently decided to leave. July 31st will be my last day at W3C. I will attempt to describe the reasons below for anyone interested, but in no way does me leaving mean that I don&#8217;t deeply appreciate W3C or that I regretted joining. If I could go a year back, I would make the same choice.</p><h2>Reason #1: I want to focus on other projects</h2><p>I didn&#8217;t have much time to work on my pet projects, as my job was consuming pretty much the entire me. <strong>This is absolutely not W3C’s fault, it&#8217;s mine</strong> and a pretty common side effect of working from home. Pull requests kept piling up on Github, I didn&#8217;t have many ideas for new side projects or time for research &amp; to come up with new techniques. I was able to work a bit on <a href="http://dabblet.com">Dabblet</a> and a <a href="http://prismjs.com/plugins/wpd/">WPD Prism plugin</a>, as they were useful for WebPlatform.org, but for the most part, I wanted to work more on open source projects, do more research, blog more etc. I also recently signed a book deal with <a href="http://oreilly.com/">O&#8217;Reilly</a> for a book on advanced CSS techniques (&#8220;CSS Secrets&#8221;, ETA Spring 2014) and I wanted to take some time off and write a great inaugural book, not just a decent one (and design it too!). I also kinda missed doing workshops or even client work, who knew!</p><p>Having more time will also mean I will be able to focus more on standards work, which is a huge passion of mine. I know it sounds odd to leave W3C to work more on &#8230;standards, but standards work was never a part of my job at W3C. If I wanted to devote time to actively participate in the CSS WG beyond the weekly telcon, or to <a href="http://dev.w3.org/csswg/css-backgrounds-4/">the specification I edit</a>, I would have to do it outside work hours. Obviously, I will still have to do it in my free time, but I recall having more of that when I was self-employed.</p><h2>Reason #2: I want to grow</h2><p>I want to be in a job that’s a challenge, that helps me grow and become a better professional. While I appreciate <a href="http://WebPlatform.org" target="_blank">WebPlatform.org</a>, I didn’t feel that doing front-end development &amp; design on it made me particularly better at what I do, at least compared to other things I could have been doing in the past year. It could be a perfect opportunity to grow for someone else, but it wasn’t for me.</p><p>I did become a better public speaker over the past year, but I would likely be doing as many talks anyway. I got some valuable conference organizing experience from <a href="http://w3.org/conf" target="_blank">W3Conf</a>, which I thoroughly enjoyed working on, but that was only a small part of my work.</p><h2>Reason #3: Different direction</h2><p>Had I stayed, my job description for the upcoming year would have a slightly different focus. Since W3C Developer Relations was a new activity, neither Doug (my manager) nor I were quite sure how we could make the biggest impact, so we were experimenting to some degree. A few months after I joined, WebPlatform.org launched and we slowly concentrated our efforts on that. If I had stayed for another year, my job would have an even stronger <a href="http://WebPlatform.org" target="_blank">WebPlatform.org</a> focus. Half of it would be front-end design &amp; development and even writing documentation for a day per week. That meant I would have to cut down many parts of my job that I enjoyed and wanted to concentrate more on, such as public speaking and event planning, and though it includes some public-facing activities like gathering feedback from developers, I&#8217;d like to do even more of that. This was not a bad decision on W3C’s part — <a href="http://webplatform.org" target="_blank">WebPlatform.org</a> needs somebody concentrating on those aspects of it. However, although I strongly believe in the vision behind the project, this was not what I would personally enjoy doing.</p><h2>Thank you, W3C</h2><p>Even though I&#8217;m leaving W3C, it will always have a very special place in my heart. I met &amp; worked with the most brilliant people I have ever met. Special mention to <a href="http://twitter.com/amyvdh" target="_blank">Amy</a>, who did not just prove to be an intelligent, interesting and kind person, but also a great friend in the past couple of weeks that I got to know her better. I got to visit <a href="http://mit.edu" target="_blank">MIT</a> and work from there for a while, which was an incredible experience. I got to contribute to <a href="http://WebPlatform.org" target="_blank">WebPlatform.org</a> which is a very ambitious and honorable project that I strongly believe in. I got to co-organize <a href="http://w3.org/conf" target="_blank">W3Conf</a>, which turned out to a successful and fun conference.</p><p>Me leaving is a personal decision that has less to do with W3C and more to do with what I want out of life. But I’m going to sorely miss the W3C Team, the culture, the technical discussions. It&#8217;s been a fun ride and I&#8217;m grateful for the chance and the trust W3C placed in me. In fact, I wouldn&#8217;t be surprised to find myself working for W3C again at some point in the future, in some way or in a different role.</p><p>But for now, here’s to the future! I&#8217;m thrilled.</p><h2>Want to work at W3C?</h2><p>As you can imagine, there is one more opening now. <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Are you a great designer with front-end development skills? Are you passionate about creating the best open web platform documentation on the Web? <strong><a href="http://www.w3.org/Consortium/Recruitment/#design-webplatform" target="_blank">Apply now!</a></strong> You will be able to work from wherever in the world you want, whatever hours in the day you want, you will have great autonomy and <a href="http://twitter.com/shepazu" target="_blank">a pretty cool boss</a>. Sweet, huh?</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/3qyh7xhdC8Q" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/07/leaving-w3c/feed/</wfw:commentRss>
      <slash:comments>29</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/07/leaving-w3c/</feedburner:origLink>
    </item>
    <item>
      <title>Meet dpi.lv: More than you probably wanted to know about screen DPI</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/Wvjcwf9gA3w/</link>
      <comments>http://lea.verou.me/2013/06/meet-dpi-lv-more-than-you-probably-wanted-to-know-about-screen-dpi/#comments</comments>
      <pubDate>Mon, 10 Jun 2013 10:59:47 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Apps & scripts]]></category>
      <category><![CDATA[Original]]></category>
      <category><![CDATA[dpi ppi]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2156</guid>
      <description><![CDATA[Yesterday (Sunday) I was on a 9.5 hour flight from Canada with no inflight entertainment (well, thanks Air Canada), so I did what every bored human being would do instead of watching movies: I decided to code an app! And out of the infinite set of possible apps somebody can make, I decided to make [&#8230;]]]></description>
      <content:encoded><![CDATA[<p><a href="http://lea.verou.me/wp-content/uploads/2013/06/Screen-Shot-2013-06-10-at-13.41.39-.png"><br class="Apple-interchange-newline" /><img class="alignleft size-medium wp-image-2157" alt="Screen Shot 2013-06-10 at 13.41.39" src="http://lea.verou.me/wp-content/uploads/2013/06/Screen-Shot-2013-06-10-at-13.41.39--300x221.png" width="300" height="221" srcset="http://lea.verou.me/wp-content/uploads/2013/06/Screen-Shot-2013-06-10-at-13.41.39--300x221.png 300w, http://lea.verou.me/wp-content/uploads/2013/06/Screen-Shot-2013-06-10-at-13.41.39-.png 898w" sizes="(max-width: 300px) 100vw, 300px" /></a></p><p>Yesterday (Sunday) I was on a 9.5 hour flight from Canada with no inflight entertainment (well, thanks Air Canada), so I did what every bored human being would do instead of watching movies: I decided to code an app! And out of the infinite set of possible apps somebody can make, I decided to make an app to calculate screen DPI/PPI.</p><p>You might be wondering if I’m still (?) sane, but you might be surprised to hear I found myself calculating screen PPIs quite frequently and wanted to save myself the hassle of doing the math every time. I’m a curious person and I wanted to know, even about products I would never buy and even when it wasn’t listed in the tech specs. Yes, my hobbies are somewhat weird. <img src="https://s.w.org/images/core/emoji/2/72x72/1f62e.png" alt="😮" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>I first thought about doing such an app a while ago, but never found the time to code it. The last time I had thought about it was a few days ago at the SF Apple Store with a friend. We were looking at the 27&#8243; Apple Thunderbolt displays in awe and thought they must have huge pixel density. After a few calculations in the console (which ironically produced a result faster than the Apple guy my friend asked), it turned out it was only &#8230;102. &#8220;I need to code an app to make this sort of calculation easy! People are being misled by marketing!&#8221; I thought.</p><p>Fast forward to my flight. You didn’t expect my laptop battery to last for 9.5 hours, right? Yeah, MacBook Air batteries are good, but not *that* good. Of course it eventually died so I had to find other ways to pass my time (I ended up sleeping — or trying to). However, by the time it died, I had gone over the threshold of being able to give it up, so I spent the rest of the day finishing it, despite my obvious jetlag and sleepiness. I was in the zone — You don’t just go sleeping when you’re in the zone, right?</p><p>Besides the DPI/PPI calculator, I added a few other fun things too:</p><ul><li>A list of devices with pre-calculated data (stored in a separate JSON file, which makes it easy to update — *hint, hint*)</li><li>Wrote a few FAQ items about DPI/PPI.</li><li>Like many of my apps, it supports link sharing through URL hashes (for examples, check the <a href="http://dpi.lv/#screens" target="_blank">screens</a> section).</li><li>I even bought a proper domain for it (<a href="http://dpi.lv">dpi.lv</a>) and drew <a href="http://dribbble.com/shots/1107403-dpi-love" target="_blank">a logo</a>! The logo took hours by itself. Not just to draw it, but to simplify Illustrator’s ugly, repetitive SVG output (which is still better than what most other tools spit out). Hand-simplifying SVG is a meditative experience that I thoroughly enjoy, to the bewilderment of everyone who read <a href="https://twitter.com/LeaVerou/status/343864607368163329" target="_blank">my tweet about it</a>. Just for the lulz, here’s the <a href="http://dpi.lv/img/logo-ai.svg" target="_blank">before</a> and the 66% smaller <a href="http://dpi.lv/img/logo.svg" target="_blank">after</a> (the small design tweaks were intentional)</li><li>The screen that displays the result resizes to reflect the aspect ratio of the resolution you’ve selected. It even animates to it, with CSS transitions! Oh, and it also uses FlexBox to center the text vertically.</li></ul><p><strong><a href="http://dpi.lv" target="_blank">Enjoy</a>!</strong></p><p>Of course it’s open source (under an MIT license, as usual), and you can <a href="https://github.com/LeaVerou/dpi">fork it on Github</a>, as usual. The JS is a bit of a mess, but I’m too tired to refactor it now. Same goes for the lack of favicon and tagline. Oh well. I still like it. <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p><strong>Important: </strong>If you are on a display with multiple dots per pixel (e.g. Retina), the resolution (pixel width × pixel height) it tries to guess will be incorrect, so you’ll have to actually input the right one. The default resolution in there is just a hint, it doesn’t mean it’s &#8220;broken&#8221; if it doesn’t guess right, they’re editable fields. That said, it would be nice to guess right in those cases too, and I will look into it.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/Wvjcwf9gA3w" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/06/meet-dpi-lv-more-than-you-probably-wanted-to-know-about-screen-dpi/feed/</wfw:commentRss>
      <slash:comments>42</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/06/meet-dpi-lv-more-than-you-probably-wanted-to-know-about-screen-dpi/</feedburner:origLink>
    </item>
    <item>
      <title>Can we get rid of gradient prefixes?</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/tUYiUBoGiuE/</link>
      <comments>http://lea.verou.me/2013/04/can-we-get-rid-of-gradient-prefixes/#comments</comments>
      <pubDate>Sun, 07 Apr 2013 12:01:12 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[News]]></category>
      <category><![CDATA[CSS]]></category>
      <category><![CDATA[CSS gradients]]></category>
      <category><![CDATA[CSS3]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2137</guid>
      <description><![CDATA[I recently realized that unprefixed gradients finally propagated to stable Chrome, and after tweeting about it, I decided to do some research on which browsers support unprefixed gradients, and what percentage of users needs them. Currently, unprefixed gradients are supported in: Chrome 26+ Firefox 16+ Opera 12.10+ IE10+ Lets have a look at which prefixes [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>I recently realized that unprefixed gradients finally propagated to stable Chrome, and after <a href="https://twitter.com/LeaVerou/status/320365600998305792" target="_blank">tweeting about it</a>, I decided to do some research on which browsers support unprefixed gradients, and what percentage of users needs them.</p><p>Currently, unprefixed gradients are supported in:</p><ul><li><span style="line-height: 13px;">Chrome 26+</span></li><li>Firefox 16+</li><li>Opera 12.10+</li><li>IE10+</li></ul><p>Lets have a look at which prefixes we actually need to use for gradients today.</p><h3>-ms-</h3><p>There was <strong>never</strong> a stable release of IE that supported -ms- prefixed gradients, those were only in preview versions (stable IE10 supports both prefixed and unprefixed gradients). So, -ms- is most definitely not required.</p><h3>-moz-</h3><p>Firefox versions &gt;= 3.6 and &lt; 16 account for <strong>4%</strong> of the global user base*. This might or might not be significant, depending on how good the fallback is that these users will see. If the gradient only adds a subtle shadow or something like that, I’d say ditch -moz-. If it’s more crucial to the design &amp; branding, it might be wise to still keep it. More tech-focused websites probably have a much lower percentage than 4%, so it might be a good idea to drop it there completely.</p><h3>-o-</h3><p>Opera unprefixed gradients in 12.10. Opera Mini never supported them. Opera versions &lt; 12.10 currently account to a total of <strong>0.25%</strong> of the global user base*. I’d say it’s safe to ditch -o- in gradients in most cases.</p><h3>-webkit-</h3><p>Chrome only very recently unprefixed gradients and Safari is a long way from doing so. Not to mention all the mobile browsers using WebKit. Unfortunately, we can’t ditch -webkit- in CSS gradients just yet.</p><h3>My opinion</h3><p>Don’t use -ms- prefixed gradients, there’s absolutely zero point in doing so. Include -moz- for the less subtle gradients. No significant need for -o- gradients. -webkit- is still needed and probably will be at least until the end of 2013. Or, of course, just use <a href="http://leaverou.github.io/prefixfree/">-prefix-free</a> and don’t bother. <img src="https://s.w.org/images/core/emoji/2/72x72/1f61b.png" alt="😛" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><p>Keep in mind that your stats might differ from global stats, so which prefixes you need to include might differ on a case by case basis. <strong>The purpose of this post is to alert you that maybe you don’t need all these prefixes, not to prescriptively tell you which ones to keep.</strong> Except -ms-, please don’t use that. There’s absolutely zero reason whatsoever.</p><p><strong>Last but not least, no matter which prefixes you include, always have a good solid color fallback!</strong></p><p>&nbsp;</p><p>* Global market share statistics from <a href="http://gs.statcounter.com/#browser_version-ww-monthly-201301-201303">StatCounter</a>, for a 3 month period of January 2013 &#8211; March 2013. The graph on the website only displays the most popular browser versions, but downloading the CSV file gives you all of them.</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/tUYiUBoGiuE" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/04/can-we-get-rid-of-gradient-prefixes/feed/</wfw:commentRss>
      <slash:comments>47</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/04/can-we-get-rid-of-gradient-prefixes/</feedburner:origLink>
    </item>
    <item>
      <title>border-corner-shape is in danger, and you can help!</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/-JEIVwB1LNI/</link>
      <comments>http://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/#comments</comments>
      <pubDate>Thu, 28 Mar 2013 19:07:09 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[News]]></category>
      <category><![CDATA[border-corner-shape]]></category>
      <category><![CDATA[CSS4]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2091</guid>
      <description><![CDATA[Remember my previous post about an app I made to preview border-corner-shape? It stirred a lot of discussion in the CSS WG, and David Baron posted this: http://dev.w3.org/csswg/css4-background/#border-corner-shape appears to me to be an example of a feature that&#8217;s addressing a problem that we don&#8217;t have &#8212; or at least that we don&#8217;t have enough [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>Remember <a href="http://lea.verou.me/2013/03/preview-border-corner-shape-before-implementations/" target="_blank">my previous post about an app I made to preview border-corner-shape</a>? It stirred a lot of discussion in the CSS WG, and <a href="http://lists.w3.org/Archives/Public/www-style/2013Mar/0498.html" target="_blank">David Baron posted this</a>:</p><blockquote><p>http://dev.w3.org/csswg/css4-background/#border-corner-shape appears<br />
             to me to be an example of a feature that&#8217;s addressing a problem that<br />
             we don&#8217;t have &#8212; or at least that we don&#8217;t have enough to be worth<br />
             adding such a feature. I think it should be removed.</p><p>In particular, if there were demand for the bevel | curve | notch<br />
             values, we&#8217;d be seeing authors using the equivalents of such values<br />
             on significant numbers of Web sites. So before agreeing to accept<br />
             this new feature, I&#8217;d like to see examples of Web sites that are<br />
             doing what these values would do. Not something similar to what<br />
             these values would do, but exactly what these values would do, or at<br />
             least close enough that the author wouldn&#8217;t care about the<br />
             difference.</p></blockquote><p>You can read the whole discussion in the thread I linked to, above.</p><p>I might be wrong, but I believe <a href="http://dev.w3.org/csswg/css4-background/#border-corner-shape" target="_blank">border-corner-shape</a> would greatly simplify many common effects, especially its &#8220;bevel&#8221; value, which can even create triangles and other polygons, that we go to great lengths to make with CSS today, and it would degrade much more nicely than border-image or backgrounds. I think it was one of <a href="http://fantasai.inkedblade.net/" target="_blank">fantasai</a>’s many great ideas and I’m glad she added it to <a href="http://dev.w3.org/csswg/css4-background/" target="_blank">the Editor’s Draft of Backgrounds &amp; Borders 4</a>.</p><p>I posted a <a href="http://lists.w3.org/Archives/Public/www-style/2013Mar/0505.html" target="_blank">list of tutorials and questions from web designers &amp; developers</a>, to illustrate that these effects are needed. However, David <a href="http://lists.w3.org/Archives/Public/www-style/2013Mar/0507.html" target="_blank">argued that “Questions from authors don&#8217;t give you enough information to be sure that the feature being added is sufficient for the author&#8217;s needs</a><a href="http://lists.w3.org/Archives/Public/www-style/2013Mar/0507.html" target="_blank">”</a>. He did have a point, so with some help from the community, <a href="http://lists.w3.org/Archives/Public/www-style/2013Mar/0653.html" target="_blank">I posted a few links to websites using such effects, and use cases</a>. <a href="http://lists.w3.org/Archives/Public/www-style/2013Mar/0519.html" target="_blank">Nicole Sullivan</a>, <a href="http://lists.w3.org/Archives/Public/www-style/2013Mar/0538.html" target="_blank">Liam Quin</a>, <a href="http://lists.w3.org/Archives/Public/www-style/2013Mar/0648.html" target="_blank">fantasai</a> and <a href="http://lists.w3.org/Archives/Public/www-style/2013Mar/0666.html" target="_blank">Lev Solntsev</a> posted a couple more.</p><p>However, the more real examples we have, the more likely it is to retain the feature in some form. This is where you come in: If you think border-corner-shape has merit, provide use cases, either by links to websites whose design elements it would simplify, screenshots of websites or descriptions of cases where you needed such a thing (in that order of preference). You can either post to the thread directly, or comment here and I’ll post them to the list in batches.</p><p>If you think it has merit but it could be improved, feel free to post about that as well. If you don’t think it’s a good idea, any alternatives you can think of are welcome as well. Or, if you don’t think it’s useful, say that too (but make sure you first fully understand what it can do). If you’re not sure how it can be used, play around with <a href="http://leaverou.github.io/corner-shape/" target="_blank">the demo app I made</a> and be creative!</p><p>Below are a few examples of shapes:</p><p><a href="http://lea.verou.me/wp-content/uploads/2013/03/bevel-1.png"><img alt="bevel-1" src="http://lea.verou.me/wp-content/uploads/2013/03/bevel-1.png" width="300" height="0" /></a><a href="http://lea.verou.me/wp-content/uploads/2013/03/scoop-1.png"><img class="alignnone  wp-image-2102" alt="scoop-1" src="http://lea.verou.me/wp-content/uploads/2013/03/scoop-1.png" width="300" height="208" srcset="http://lea.verou.me/wp-content/uploads/2013/03/scoop-1.png 891w, http://lea.verou.me/wp-content/uploads/2013/03/scoop-1-300x207.png 300w" sizes="(max-width: 300px) 100vw, 300px" /></a><a href="http://lea.verou.me/wp-content/uploads/2013/03/notch-1.png"><img class="alignnone  wp-image-2099" alt="notch-1" src="http://lea.verou.me/wp-content/uploads/2013/03/notch-1.png" width="300" srcset="http://lea.verou.me/wp-content/uploads/2013/03/notch-1.png 891w, http://lea.verou.me/wp-content/uploads/2013/03/notch-1-300x207.png 300w" sizes="(max-width: 891px) 100vw, 891px" /></a><a href="http://lea.verou.me/wp-content/uploads/2013/03/notch-2.png"><img class="alignnone  wp-image-2101" alt="notch-2" src="http://lea.verou.me/wp-content/uploads/2013/03/notch-2.png" width="300" srcset="http://lea.verou.me/wp-content/uploads/2013/03/notch-2.png 891w, http://lea.verou.me/wp-content/uploads/2013/03/notch-2-300x207.png 300w" sizes="(max-width: 891px) 100vw, 891px" /></a><a href="http://lea.verou.me/wp-content/uploads/2013/03/scoop-2.png"><img class="alignnone  wp-image-2103" alt="scoop-2" src="http://lea.verou.me/wp-content/uploads/2013/03/scoop-2.png" width="300" srcset="http://lea.verou.me/wp-content/uploads/2013/03/scoop-2.png 891w, http://lea.verou.me/wp-content/uploads/2013/03/scoop-2-300x207.png 300w" sizes="(max-width: 891px) 100vw, 891px" /></a><a href="http://lea.verou.me/wp-content/uploads/2013/03/bevel-4.png"><img class="alignnone  wp-image-2098" alt="bevel-4" src="http://lea.verou.me/wp-content/uploads/2013/03/bevel-4.png" width="300" srcset="http://lea.verou.me/wp-content/uploads/2013/03/bevel-4.png 891w, http://lea.verou.me/wp-content/uploads/2013/03/bevel-4-300x207.png 300w" sizes="(max-width: 891px) 100vw, 891px" /></a><a href="http://lea.verou.me/wp-content/uploads/2013/03/bevel-3.png"><img class="alignnone  wp-image-2097" alt="bevel-3" src="http://lea.verou.me/wp-content/uploads/2013/03/bevel-3.png" width="300" srcset="http://lea.verou.me/wp-content/uploads/2013/03/bevel-3.png 891w, http://lea.verou.me/wp-content/uploads/2013/03/bevel-3-300x207.png 300w" sizes="(max-width: 891px) 100vw, 891px" /></a><a href="http://lea.verou.me/wp-content/uploads/2013/03/bevel-2.png"><img class="alignnone  wp-image-2096" alt="bevel-2" src="http://lea.verou.me/wp-content/uploads/2013/03/bevel-2.png" width="300" srcset="http://lea.verou.me/wp-content/uploads/2013/03/bevel-2.png 891w, http://lea.verou.me/wp-content/uploads/2013/03/bevel-2-300x207.png 300w" sizes="(max-width: 891px) 100vw, 891px" /></a></p><p>I wanted to demo triangles and trapezoids as well, but it seems there’s a bug in my app, so I’ll have to debug it first <img src="https://s.w.org/images/core/emoji/2/72x72/1f641.png" alt="🙁" class="wp-smiley" style="height: 1em; max-height: 1em;" /> If we allow border-corner-shape to have different values for all four corners, even more possibilites open (e.g. arrows).</p><p>Spend a few minutes to help the CSS WG help you. Thanks!</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/-JEIVwB1LNI" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/feed/</wfw:commentRss>
      <slash:comments>91</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/</feedburner:origLink>
    </item>
    <item>
      <title>Preview corner-shape, before implementations!</title>
      <link>http://feedproxy.google.com/~r/leaverou/~3/pDAn655XE1M/</link>
      <comments>http://lea.verou.me/2013/03/preview-border-corner-shape-before-implementations/#comments</comments>
      <pubDate>Sun, 24 Mar 2013 16:07:50 +0000</pubDate>
      <dc:creator><![CDATA[Lea Verou]]></dc:creator>
      <category><![CDATA[Apps & scripts]]></category>
      <category><![CDATA[Original]]></category>
      <category><![CDATA[border-radius]]></category>
      <category><![CDATA[CSS4]]></category>
      <category><![CDATA[SVG]]></category>
      <guid isPermaLink="false">http://lea.verou.me/?p=2074</guid>
      <description><![CDATA[As an editor of the Backgrounds &#38; Borders Level 4 spec, I am naturally a bit more interested in the cool features it will bring, once implementations start (it’s currently too early for that). One of the coolest features in it is corner-shape. While in Backgrounds &#38; Borders 3, border-radius was only used for rounded [&#8230;]]]></description>
      <content:encoded><![CDATA[<p>As an editor of the <a href="http://dev.w3.org/csswg/css4-background/" target="_blank">Backgrounds &amp; Borders Level 4</a> spec, I am naturally a bit more interested in the cool features it will bring, once implementations start (it’s currently too early for that). One of the coolest features in it is <a href="http://dev.w3.org/csswg/css-backgrounds-4/#corner-shaping" target="_blank">corner-shape</a>. While in <a href="http://www.w3.org/TR/css3-background/" target="_blank">Backgrounds &amp; Borders 3</a>, <a href="http://www.w3.org/TR/css3-background/#the-border-radius" target="_blank">border-radius</a> was only used for rounded (actually, elliptical) corners, with the help of corner-shape, it will be able to do so much more! Beveled corners, scoop-style corners (informally known as “negative border-radius”), even rectangular notches.</p><p>Unfortunately, until it’s implemented in browsers, it’s hard to play with it. Or, is it? I spent the weekend creating an app in which you can enter values for corner-shape, border-radius, width, and height, and see the result, simulated through SVG, as well as the fallback in browsers that don’t support border-corner-radius (which is currently all browsers).</p><p style="text-align: center;"><a href="http://lea.verou.me/wp-content/uploads/2013/03/Screen-Shot-2013-03-24-at-17.45.38-.png"><img class="aligncenter  wp-image-2076" alt="corner-shape preview" src="http://lea.verou.me/wp-content/uploads/2013/03/Screen-Shot-2013-03-24-at-17.45.38-.png" width="600" srcset="http://lea.verou.me/wp-content/uploads/2013/03/Screen-Shot-2013-03-24-at-17.45.38-.png 1023w, http://lea.verou.me/wp-content/uploads/2013/03/Screen-Shot-2013-03-24-at-17.45.38--300x224.png 300w" sizes="(max-width: 1023px) 100vw, 1023px" /></a></p><p>Obviously, it’s not a full preview, since you can only play with a limited subset of CSS properties, but it should be good for seeing the kinds of shapes that will be possible.You could also copy the generated SVG from the Developer tools of your browser, and use it as a background in any website!</p><p>Use it here: <a class="view-demo" href="http://leaverou.github.com/corner-shape">corner-shape preview</a></p><p>Tested to work in at least Chrome, IE9, Firefox, Safari and theoretically, should work in any SVG-enabled browser.</p><p>Enjoy! Hope you like it.</p><p><strong>Important: </strong>Please note that corner-shape is still at a very early stage and might completely change before implementations. You can also help to make it better: Play with it and comment on what you think about its naming and functionality!</p><img src="http://feeds.feedburner.com/~r/leaverou/~4/pDAn655XE1M" height="1" width="1" alt=""/>]]></content:encoded>
      <wfw:commentRss>http://lea.verou.me/2013/03/preview-border-corner-shape-before-implementations/feed/</wfw:commentRss>
      <slash:comments>40</slash:comments>
      <feedburner:origLink>http://lea.verou.me/2013/03/preview-border-corner-shape-before-implementations/</feedburner:origLink>
    </item>
  </channel>
</rss>
